<?xml version="1.0" encoding="UTF-8"?>
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <title>Roads and Bridges</title>
    <meta charset="UTF-8"/>
    <link rel="stylesheet" href="style.css"/>
  </head>
  <body>
    <h1>Challenges Facing Digital Infrastructure</h1>

    <h2 id="relationship-with-money">Open source’s complicated relationship with money</h2>
    <p class="c4">
      Money has been a taboo topic for open source projects since the early days of the free software movement, which arose in direct response to the practice of commercial, proprietary software.
    </p>
    <p class="c4">
      In the context of the free software movement, the aversion to money is certainly understandable. Money is what commercialized software in the 1980s, and it took decades to reverse this mentality and promote the benefits of building software that is free to use, distribute
      ,
       and modify. Although we take free software for granted today, in the 1980s it was truly a counterculture and revolutionary mindset.
    </p>
    <p class="c4">
      Yet even within open source communities, there is a pervasive belief that money has a corrupting influence on open source.
       It is indeed remarkable how much has been created entirely through labors of love. These days, software development is considered a lucrative field, with coding schools luring prospective students with the promise of making a six-figure entry-level salary. By contrast, there is something pure and admirable about creating a software project simply for the joy of it.
    </p>
    <p class="c4">
      On a more practical level, open source projects traditionally arise from a real and identifiable need. Someone decides that a project could be done better, so they fork the project, make improvements, then release it for consumption. Pragmatism is core to open source’s culture, as evidenced by its strategic break from the free software movement in the late 1990s. Some open source contributors fear, perhaps justifiably, that money will introduce bloat into the system, with developers creating new projects simply to get funding, rather than because the solution is needed.
    </p>
    <p class="c4">
      David Heinemeier Hansson (also known as DHH), who created the popular software framework Ruby on Rails, warned in 2013 against mixing open source with money:
    </p>
    <p class="c3">
      <span class="c6">Open source has been such an incredible force for quality and community exactly because it's not been defined in market terms. In market terms, most open source projects should never have had a chance.</span>
    </p>
    <p class="c3">
      <span class="c6">Take Ruby on Rails. [...] That's a monumental achievement of humanity! Thousands, collaborating for a decade, to produce an astoundingly accomplished framework and ecosystem available to anyone at the cost of zero. Take a second to ponder the magnitude of that success. Not just for Rails, of course, but for many other, and larger, open source projects out there with an even longer lineage and success.</span>
    </p>
    <p class="c3">
      <span class="c6">It's against this fantastic success of social norms that we should be extraordinary [sic] careful before we let market norms corrupt the ecosystem.</span>
      <sup>
        <a href="appendix.xhtml#ftnt72" id="ftnt_ref72">[72]</a>
      </sup>
    </p>
    <p class="c4">
      Structurally, open source’s greatest advantage
      —
      its penchant for democracy
      —
      is also its weakness. Many open source projects are nothing more than a public code repository t
      o which
       a group of people contribute regularly: the equivalent of an unofficial social club on a college campus. There is no legal structure and there are no clear owners or leaders. “Maintainers
      ,
      ” or the primary contributors, often emerge 
      <span class="c6">de facto</span>
      , based on who authored the project
       or 
      put in significant time or effort
      . E
      ven then
      , however,
       some projects are reluctant to introduce hierarchy by clearly favoring one contributor over another.
    </p>
    <p class="c4">
      In April of 2008, Jeff Atwood, an aforementioned prominent .NET developer, announced he was donating $5,000 towards an open source project, ScrewTurn Wiki. ScrewTurn Wiki is a wiki project developed by Dario Solara, another .NET developer, and maintained by volunteers. Atwood told Dario that the grant would be “no strings attached
      ;
      ” Solara could use the money as he saw fit towards the project.
    </p>
    <p class="c4">
      Several months later, Atwood followed up with Solara to ask how he decided to spend the donation. Solara replied that the grant money was 
      <span class="c6">“still untouched. It’s not easy to use it….What would you suggest?”</span>
       Atwood wrote that he was “crushingly disappointed” by the response.
      <sup>
        <a href="appendix.xhtml#ftnt73" id="ftnt_ref73">[73]</a>
      </sup>
    </p>
    <p class="c4">
      The decentralized nature of open source has made it what it is: crowdsourced software that anyone can build, share and contribute to. But when it comes to discussing organizational needs or sustainability, it can be difficult to make 
      authoritative 
      decisions.
    </p>
    <p class="c4">
      These transitions to long-term sustainability can be drawn out and painful. One of the more prominent examples is the Linux kernel, an open source project used in many operating systems worldwide, including Android and Chrome OS. It was created in 1991 by computer science student Linus Torvalds.
    </p>
    <p class="c4">
      As the Linux kernel grew in popularity, Linus was reluctant to discuss how to scale development of the project, preferring to manage everything himself. Project maintainers grew restless and even angry at Torvalds, sparking “really big fights
      ,
      ” according to Torvalds
      . The disputes peaked
       in 2002 with discussions of a potential schism.
    </p>
    <p class="c4">
      Torvalds attributed the internal conflict to a lack of organization, rather than 
      to 
      any technical 
      issues
      :
    </p>
    <p class="c3">
      <span class="c6">We had really big fights back in 2002 or so where I was dropping patches left and right, and things really weren't working. It was very painful for everybody, and very much for me, too. Nobody really likes criticism, and there was a lot of flaming going around</span>
      <span class="c6">—</span>
      <span class="c6">and because it wasn't a strictly technical problem, you couldn't point to a patch and say, </span>
      <span class="c6">“</span>
      <span class="c6">hey, look, that patch improves timings by 15%</span>
      <span class="c6">”</span>
      <span class="c6"> or anything like that: there was no technical solution. The solution ended up being better tools, and a work flow [sic] that allowed much more distributed management.</span>
      <sup class="c6">
        <a href="appendix.xhtml#ftnt74" id="ftnt_ref74">[74]</a>
      </sup>
    </p>
    <p class="c4">
      The Linux Foundation was created in 2007 to help protect and maintain Linux and its associated projects. Torvalds does not run the Linux Foundation himself, preferring instead to receive a steady salary as a “Linux Fellow” and work on his projects as an engineer.
    </p>
    <p class="c4">
      While open source software is admirably rooted in a culture of volunteerism and collaboration relatively untouched by extrinsic motives, the reality is 
      that 
      our
       economy 
      and society
      ,
       from multimillion dollar companies to government websites
      , depends on open source
      .
    </p>
    <p class="c4">
      Overall, this is probably a positive development for society. It means that software is no longer strictly relegated to private, proprietary development, as it ha
      d
       been for decades. The fact that the United States government, or a social network website with billions of users, incorporates community-built software
      ,
       paints an optimistic future for democracy.
    </p>
    <p class="c4">
      In addition, many projects function well on a community basis if they are on 
      the extremes of size
      : 
      that is, either 
      small projects that do not require significant maintenance
       (
      as in the example of Arash Payan and Appirater
      )
      , or very large projects that have found significant corporate support
       (
      as in the example of Linux
      )
      .
    </p>
    <p class="c4">
      However, many projects are trapped somewhere in the middle: large enough to require significant maintenance, but not quite so large that corporations are clamoring to offer support. These are the stories that go unnoticed and untold. From both sides, these maintainers are told they are the problem: 
      S
      mall project maintainers think mid-sized maintainers should just learn to cope, and large project maintainers think if the project were “good enough
      ,
      ” institutional support would have already come to them.
    </p>
    <p class="c4">
      There are also political concerns around financial support that make it harder to find a reliable source of funding. A single company may not want to sponsor development work that also benefits their competitor, who paid nothing. A private benefactor may want special privileges that threaten the neutrality of a project. (For example, for security-related projects, privileged disclosure of vulnerabilities
      —
      paying for special knowledge about security vulnerabilities instead of exposing those vulnerabilities to the public
      —
      is a controversial request.) And governments may have political reasons to sponsor the development of a particular project
      ,
       or ask for special favors such as “
      backdoors” 
      (a secret way of bypassing security authentication), even if that project is used internationally.
    </p>
    <p class="c4">
      The recent legal disputes between the FBI and Apple help underscore the tension between technology and government, even beyond open source projects. The FBI has repeatedly
      , through court orders,
       requested Apple’s assistance in unlocking iPhones to help resolve criminal investigations. Apple has repeatedly denied these requests. In February 2016, the FBI requested Apple’s assistance in unlocking the iPhone belonging to one of the shooters in a recent terrorist attack in San Bernardino, California. Apple again denied the request, posting a public customer letter on its website, which stated that:
    </p>
    <p class="c3">
      <span class="c6">While we believe the FBI’s intentions are good, it would be wrong for the government to force us to build a backdoor into our products. And ultimately, we fear that this demand would undermine the very freedoms and liberty our government is meant to protect.</span>
      <sup>
        <a href="appendix.xhtml#ftnt75" id="ftnt_ref75">[75]</a>
      </sup>
    </p>
    <p class="c4">
      In March 2016, the FBI found a third party to help it unlock the iPhone and dropped the legal case.
    </p>
    <p class="c4">
      One of open source’s greatest strengths is that the code is considered a public good, and many projects take governance seriously. It is personally important to many project maintainers that no individual party control something that the public uses and benefits from. However, this commitment to neutrality can come at a price, when many resources available to software developers today (such as venture capital or corporate donations) are based on expectations of influence or financial return.
    </p>
    <p class="c4">
      Open source software is being created and used at a rate never seen before. Many open source projects are experiencing a
       
      difficult transition from selfless creative pursuit to critical public infrastructure. These increasing dependencies mean we have a 
      shared
       responsibility to ensure that these projects find the support they need.
    </p>

    <h2 id="problems-accelerating">Why digital infrastructure support problems are accelerating</h2>
    <p class="c4">
      Open source is quickly becoming a standard for digital infrastructure projects, and in software development overall, due to the benefits cited earlier in this paper. Black Duck, a company that helps clients manage open source software, runs an annual survey that asks companies about their open source use. (This survey is one of the few open source data projects in existence.) According to their 2015 survey, 78% of the 1,300 companies surveyed said their software created for customers was built on open source, nearly double that of 2010.
      <sup>
        <a href="appendix.xhtml#ftnt76" id="ftnt_ref76">[76]</a>
      </sup>
    </p>
    <p class="c4">
      Open source has seen massive growth in popularity in the last five years, not just because of the obvious benefits to developer and consumer, but also due to new tools that make it easier to collaborate on software. In order to understand why digital infrastructure faces growing support problems, we must understand how open source software development is proliferating.
    </p>
    <p class="c4">
      <span class="c6">GitHub as a standardized place to collaborate on code</span>
    </p>
    <p class="c4">
      The role of GitHub in bringing 
      open source to a mainstream audience cannot be overemphasized. Although open source has existed for over 
      thirty
       years, until 2008, contributing to an open source project was not so easy. A developer would have to figure out who the maintainer was, find a way to contact them, and propose changes using whichever format that project maintainer preferred (for example, a mailing list or message board). GitHub standardized these methods of communication: maintainers are transparently listed on a project’s page, and discussion of proposed changes takes place on 
      the 
      GitHub platform.
    </p>
    <p class="c4">
      GitHub 
      created
       vocabulary that is now standard among open source contributors, such as the “pull request” (where a developer submits changes to a project for review) and repurposing the term “fork” 
      (historically, creating a copy of a project and modifying it into a new project)
      . Prior to GitHub, forking a project meant there were irreconcilable differences over the direction a project should take. Forking was considered a serious move: if a group of developers forked a project, it meant the project was splitting into ideological factions. Forking 
      was
       also used to develop a new project that might have a markedly different purpose from the original project.
    </p>
    <p class="c4">
      This type of “project fork” still exists today, but GitHub decided to use the term “fork” to encourage more activity on their platform. A GitHub fork, unlike a project fork, means temporarily copying a project, making changes, and usually merging it back into the project. 
      F
      orking as an everyday practice on GitHub’s platform has added a positive, lightweight connotation to the term: a sign of taking one person’s idea and making it better.
    </p>
    <p class="c4">
      GitHub also helped standardize the use of a version control system called Git. Version control systems keep track of everybody’s work on a particular piece of code. For example, if Developer 1 and Developer 2 are fixing different parts of the same code at the same time, logging each change in a version control system ensures their changes don’t conflict with one another.
    </p>
    <p class="c4">
      There are several options for version control systems, including Apache Subversion and Concurrent Versions System (CVS). Git used to be a fairly unknown version control system. In 2010, Subversion was used in 60% of software projects, whereas Git was used in just 11%.
      <sup>
        <a href="appendix.xhtml#ftnt77" id="ftnt_ref77">[77]</a>
      </sup>
       
    </p>
    <p class="c4">
      Linus Torvalds, the developer behind Linux, designed Git in 2005 as a better and faster way to manage multiple contributions from many people. Git was markedly different from earlier version control systems and therefore not so easy to pick up, but its decentralized workflow solved a real problem for developers.
    </p>
    <p class="c4">
      GitHub provided an intuitive user interface for open source projects that used Git, thus making it easier for developers to learn. The more developers used GitHub, the more they wanted to keep using Git. Today, in 2016, Git is used in 38% of software projects, w
      hile
       Subversion
      ’s share has
       drop
      ped
       to 47%.
      <sup>
        <a href="appendix.xhtml#ftnt78" id="ftnt_ref78">[78]</a>
      </sup>
       
      Although Subversion is still the most popular version control system today, it
      s use
       is declining.
    </p>
    <p class="c4">
      The widespread adoption of Git makes it much easier for a developer to join any open source project on GitHub, because the method of making changes, and communicating those changes, is the same across projects. Learning how to contribute to one project gives someone the ability to contribute to hundreds of others. This was not the case before GitHub, where different version control systems were used for different projects.
    </p>
    <p class="c4">
      <span style="overflow: hidden; display: inline-block; margin: 0.00px 0.00px; border: 0.00px solid #000000; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px); width: 619.00px; height: 344.00px;">
        <img alt="" src="images/image00.png" style="width: 619.00px; height: 344.00px; margin-left: 0.00px; margin-top: 0.00px; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px);" title=""/>
      </span>
    </p>
    <p class="c4">
      <span class="c6">Job postings requiring knowledge of Git vs. Subversion.</span>
      <sup class="c6">
        <a href="appendix.xhtml#ftnt79" id="ftnt_ref79">[79]</a>
      </sup>
    </p>
    <p class="c4">
      Finally, GitHub provided a place for developers to talk to each other in a public setting for social reasons, not just code collaboration. GitHub has become a de facto community of sorts for developers, who use it to communicate with each other and show off their work. Developers now have an opportunity to demonstrate their leadership and portfolio of work in a way they could not before. 
    </p>
    <p class="c4">
      GitHub’s usage reflects its meteoric rise. In 2011, there were only 2 million repositories.
      <sup>
        <a href="appendix.xhtml#ftnt80" id="ftnt_ref80">[80]</a>
      </sup>
       Today, GitHub has 14 million users and over 35 million repositories.
      <sup>
        <a href="appendix.xhtml#ftnt81" id="ftnt_ref81">[81]</a>
      </sup>
       (Note that this includes forked repositories; the unique repository count is probably closer to 17 million.) GitHub’s Brian Doll noted that the first million repositories took nearly 4 years to create; getting from nine to ten million took just 48 days.
      <sup>
        <a href="appendix.xhtml#ftnt82" id="ftnt_ref82">[82]</a>
      </sup>
    </p>
    <p class="c4">
      By contrast, SourceForge, the most popular platform for hosting open source code before GitHub, had 150,000 projects in 2008.
       An estimated 18,000 of those projects were active.
      <sup>
        <a href="appendix.xhtml#ftnt83" id="ftnt_ref83">[83]</a>
      </sup>
    </p>
    <p class="c4">
      <span class="c6">Stack Overflow as a standardized place to get help with code</span>
    </p>
    <p class="c4">
      Another important tool is Stack Overflow, a popular Q&amp;A website for programmers, also created in 2008 by Jeff Atwood, the aforementioned programmer and blogger, and 
      Joe
      l Spolsky. As of April 2014, Stack Overflow had over 4 million registered users and over 11 million questions answered (note that one does not need to be registered to view questions or their answers).
      <sup>
        <a href="appendix.xhtml#ftnt84" id="ftnt_ref84">[84]</a>
      </sup>
       Stack Overflow has become a 
      <span class="c6">de facto</span>
       support platform for developers to ask questions about coding, find answers to specific code problems, or just get advice on the best way to build a certain piece of software. It can be thought of as crowdsourced “customer support” for developers around the world. While Stack Overflow is not a place to write live code, it is a critical collaboration tool for the individual developer, making it easier to solve problems and code more efficiently. This means any one individual developer is capable of achieving more in a shorter period of time, increasing overall output. Stack Overflow has also helped people learn new coding concepts (or even get started with coding itself), making coding easier and more accessible to all.
    </p>
    <p class="c4">
      <span class="c6">Macro trends in a rapidly changing landscape</span>
    </p>
    <p class="c4">
      The outsized popularity of open source has led to significant changes in how today’s developer talks, thinks about
      ,
       and collaborates on software.
    </p>
    <p class="c4">
      Firstly, licensing expectations and requirements have changed to reflect a world that embraces open source as the standard, not the exception: a triumph over the proprietary world of the 1980s. Both GitHub and Stack Overflow’s policies reflect this.
    </p>
    <p class="c4">
      From the beginning, Stack Overflow used a Creative Commons license called CC-BY-SA for all content posted to the website. This license was limiting, however, because it required that users provide attribution when using others’ code, as well as distribute contributions under the same license.
      <sup>
        <a href="appendix.xhtml#ftnt85" id="ftnt_ref85">[85]</a>
      </sup>
       While many ignored or were not aware of this license, it made it difficult for developers under stricter constraints (such as in a corporate environment) to use Stack Overflow. If they posted a question asking for help with their code, and a stranger fixed it, legally, they would have had to attribute the code to that person.
    </p>
    <p class="c4">
      As a result, Stack Overflow announced an intent to move all new code contributions to the MIT License, which is an open source license with fewer restrictions.
      <sup>
        <a href="appendix.xhtml#ftnt86" id="ftnt_ref86">[86]</a>
      </sup>
       As of April 2016, they are still actively discussing and soliciting feedback from the community on the best way to implement more permissiveness.
      <sup>
        <a href="appendix.xhtml#ftnt87" id="ftnt_ref87">[87]</a>
      </sup>
       This move is a nod to both Stack Overflow’s popularity and the proliferation of open source at large. That a developer working at a big software company could legally include a complete stranger’s code in a product they charge for is an accomplishment for open source, indeed.
    </p>
    <p class="c4">
      GitHub, by contrast, initially avoided providing default licensing for projects posted to its platform, perhaps fearing it would slow user adoption and growth.
      <sup>
        <a href="appendix.xhtml#ftnt88" id="ftnt_ref88">[88]</a>
      </sup>
       Projects posted to GitHub, then, grant the right to view and fork the project, but are otherwise protected under copyright, unless the developer specifies an open source license.
    </p>
    <p class="c4">
      In 2013, facing public concerns, GitHub finally decided to take a stronger stance on licensing, including the creation and promotion of a microsite, choosealicense.com, to help users pick a license for their project. They also now encourage their users to choose a license from a list of options when creating a new repository.
      <sup>
        <a href="appendix.xhtml#ftnt89" id="ftnt_ref89">[89]</a>
      </sup>
    </p>
    <p class="c4">
      What’s interesting, however, is that many developers were either not aware 
      that 
      their “open source” projects were not legally 
      protected
      , or didn’t care. An informal 2013 study by the Software Freedom Law Center of 1.6 million GitHub repositories revealed that only 15% had specified a license.
      <sup>
        <a href="appendix.xhtml#ftnt90" id="ftnt_ref90">[90]</a>
      </sup>
       Granted, not all repositories on GitHub are code: many “projects” are notes, wikis, or other forms of content, so the situation is likely less dire than it seems. However, the low percentage of license
      d projects
       suggests that users are not internally motivated to protect even content-based projects that might be used or shared elsewhere.
    </p>
    <p class="c4">
      This lack of interest in licensing led James Governor, cofounder of developer analyst firm Red Monk, to observe in 2012 that 
      <span class="c6">“younger devs today are about POSS - Post open source software. Fuck the license and governance, just commit to Github”</span>
      .
      <sup>
        <a href="appendix.xhtml#ftnt91" id="ftnt_ref91">[91]</a>
      </sup>
       In other words, 
      defaulting to open information is so culturally obvious today that developers don’t see themselves as doing something differently anymore, the way the political free software rebels did in the 1980s. This shift in values, while inspiring on a macro level, could lead to legal complications for individuals as their projects grow in popularity or are used for commercial purposes.
    </p>
    <p class="c4">
      But by making it so easy and standardized to collaborate on code together, open source is also grappling with a perverse set of externalities.
    </p>
    <p class="c4">
      Open source made coding easier and more accessible to the world. This increased accessibility, in turn, has created a new class of developers who are less experienced
      ,
       but 
      who 
      know how to utilize others’ prefabricated components to build what they need.
    </p>
    <p class="c4">
      In 2012, Jeff Atwood, the cofounder of Stack Overflow, wrote a tongue-in-cheek 
      blog 
      post called “Please Don’t Learn How to Code”, lamenting the trendiness of coding bootcamps and schools. While Atwood commended the desire of nontechnical people to understand code on a conceptual level, he warned against assuming that 
      <span class="c6">“adding naive, novice, not-even-sure-they-like-this-whole-programming-thing coders to the workforce is a net positive for the world.”</span>
      <sup>
        <a href="appendix.xhtml#ftnt92" id="ftnt_ref92">[92]</a>
      </sup>
    </p>
    <p class="c4">
      Under these circumstances, the open source development model looks different than it did before. Prior to GitHub’s rise, because there were fewer open source projects, developers were a smaller but on the whole more experienced group, and those who used shared code were likely also the people contributing back.
    </p>
    <p class="c4">
      Today, the hypergrowth of coding literacy means many inexperienced developers are flooding the market. These newer developers borrow shared code to write what they need, but they are less capable of making substantial contributions back to those projects. Many are also accustomed to thinking of themselves as “users” of open source projects, rather than members of a community. Because open source tools are more standardized and easy to use, it’s much easier these days for someone to pop into a GitHub forum and make a rude comment or demanding request, which burdens and exasperates project maintainers.
    </p>
    <p class="c4">
      These changing demographics have also led to a much more fragmented system of software, with many developers releasing new projects and creating a confusing web of dependencies. Drew Hamlett, who calls himself a “recovering magpie developer
      ,
      ” wrote a popular post in January 2016 called “The Sad State of Web Development
      ,
      ” about how web development has changed, referring
       specifically
       to the Node.js ecosystem:
    </p>
    <p class="c3">
      <span class="c6">The people who have stayed in the Node community have undoubtedly created the most over engineered eco system [sic] that has ever appeared. No one can create a library that does anything. Every project that creeps up is even more ambitious than the next….No one will build something that actually does anything. I just don’t understand. The only thing I can think, is people are just constantly re writing Node.js apps over and over.</span>
      <sup>
        <a href="appendix.xhtml#ftnt93" id="ftnt_ref93">[93]</a>
      </sup>
    </p>
    <p class="c4">
      There are so many projects being written and released today that it is simply not feasible for each one to grow a large, sustainable community with regular contributors who passionately discuss changes over extensive mailing list discussions. Instead, many projects will be maintained by just one or two people. 
      But demand for those projects by users might still outpace the work that is required to maintain it.
    </p>
    <p class="c4">
      GitHub made it easy to create and contribute to new projects. This was a blessing for the open source ecosystem, because projects develop more rapidly, but it can be a curse to any one project maintainer, with more people easily reporting issues and requesting new features, without actually contributing back themselves. These shallow interactions only create more work for the maintainers, who are expected to address a growing volume of requests.
    </p>
    <p class="c4">
      It would not be unreasonable to suggest that a “post
      -
      open source” world carries implications not just for licensing, as James Governor originally intended with his comment, but for the process of development itself.
    </p>
    <p class="c4">
      Noah Kantrowitz, a longtime Python developer and member of the Python Software Foundation, summarized this shift in a widely cited blog post:
    </p>
    <p class="c3">
      <span class="c6">In the early days of the open source movement there were relatively few projects and in general most people using a project were also contributing back to it in some way. Both of these have changed by likely uncountable orders of magnitude.</span>
    </p>
    <p class="c3">
      <span class="c6">[...] As we have moved to more and more niche tools, it becomes harder to justify the time investment to become a contributor. “Scratching your own itch” is still a powerful motivator, but that alone is difficult to build an ecosystem on.</span>
    </p>
    <p class="c3">
      <span class="c6">The other problem is the growing imbalance between producers and consumers. In the past, these were roughly in balance. Everyone put time and effort in to the Commons and everyone reaped the benefits. </span>
      <span class="c6">These days, very few people put in that effort and the vast majority simply benefit from those that do. This imbalance has become so ingrained that for a company to re-pay (in either time or money) even a small fraction of the value they derive from the Commons is almost unthinkable.</span>
      <sup>
        <a href="appendix.xhtml#ftnt94" id="ftnt_ref94">[94]</a>
      </sup>
    </p>
    <p class="c4">
      This is not to say that big open source projects with strong contributor communities do not exist anymore. (
      Node.js, 
      which will be discussed later in this paper, is an example of a project that has achieved this status.) It is that in addition to these successes, there is a new class of projects today that is underserved by open source’s current norms and expectations, and that the behavior deriving from these new norms has affected even longer
      -
      running, bigger projects.
    </p>
    <p class="c4">
      Hynek Schlawack, a Python Software Foundation fellow and contributor to Python infrastructure projects, frets about a future with a wider demand base but only a handful of keystone contributors:
    </p>
    <p class="c3">
      <span class="c6">What frustrates me most is that we have an all-time high of Python developers and an all-time low on high quality contributions.[...] As soon as pivotal developers like Armin Ronacher slow down their churn, the whole community feels it immediately.  The moment Paul Kehrer stops working on PyCA we’re screwed. If Hawkowl stops porting, Twisted will never be on Python 3 and git.</span>
    </p>
    <p class="c3">
      <span class="c6">So we’re bleeding due to people who cause more work than they provide. [...] Right now everyone is benefitting from what has been built but due to lack of funding and contributions it’s deteriorating. I find that worrying, because Python might be super popular right now but once the consequences hit us, the opportunists will leave as fast as they arrived.</span>
      <sup class="c6">
        <a href="appendix.xhtml#ftnt95" id="ftnt_ref95">[95]</a>
      </sup>
    </p>
    <p class="c4">
      Open source has only been popular among mainstream developers for perhaps five years; its long-term sustainability is rarely discussed, or even acknowledged, by the broader software community. With the explosion of new developers using, but not giving back to, shared code, we are building palaces on top of crumbling infrastructure.
    </p>

    <h2 id="hidden-costs">The hidden costs of ignoring infrastructure</h2>
    <p class="c4">
      As we’ve seen, digital infrastructure is a critical part of today’s world. Our society is built on software, and that software is increasingly built on infrastructure that uses open source methodology. By not taking steps to understand and support our digital infrastructure, what is at risk?
    </p>
    <p class="c4">
      The dangers of not investing back into digital infrastructure can be divided into two categories: direct and indirect
       costs
      .
    </p>
    <p class="c3">
      <span class="c6">Direct costs</span>
      <span class="c1"> </span>
      include unspotted bugs and security vulnerabilities that could be exploited for malicious intent or lead to unexpected breaks in software functionality. These costs are acutely felt and cause problems that need to be immediately addressed.
    </p>
    <p class="c3">
      <span class="c6">Indirect costs</span>
       include things like loss of qualified labor and slower growth and innovation. While they are not immediately obvious, they represent uncaptured social value.
    </p>
    <p class="c4">
      <span class="c6">Bugs, security vulnerabilities</span>
      <span class="c6">, and interruptions in service</span>
    </p>
    <p class="c4">
      The introduction to this report profiled the security bug Heartbleed, which was discovered in April 2014 
      in a software library called OpenSSL. Heartbleed, because it was so widespread and affected so many major websites, drew significant public attention to the security vulnerabilities in software.
    </p>
    <p class="c4">
      In September 2014, another major security vulnerability was found in a key tool called Bash. Bash is included in popular operating systems like Linux and Mac OS, and as a result, is installed on more than 70% of the machines connected to the Internet.
      <sup>
        <a href="appendix.xhtml#ftnt96" id="ftnt_ref96">[96]</a>
      </sup>
       The set of security bugs, dubbed “Shellshock
      ,
      ” could be exploited to allow someone unauthorized access to a computer system. The vulnerabilities had gone undetected for at least a decade. Bash was originally authored by a developer named Brian Fox in 1987, but since 1992 has been maintained by a single developer, Chet Ramey. He works as a senior technology architect at Case Western University in Ohio.
    </p>
    <p class="c4">
      Another project, OpenSSH, provides a free suite of security-related programs with widespread use across the web. Developers have discovered multiple security vulnerabilities in its code that have been subsequently addressed and fixed, including one in July 2015 that could allow attackers to bypass limits on password login attempts, and one in January 2016 that could leak private security keys.
      <sup>
        <a href="appendix.xhtml#ftnt97" id="ftnt_ref97">[97]</a>
      </sup>
      <sup>
        <a href="appendix.xhtml#ftnt98" id="ftnt_ref98">[98]</a>
      </sup>
    </p>
    <p class="c4">
      Part of the problem is that many open source 
      projects
       are legacy tools, built once by a passionate developer or group of developers, who then lacked resources to manage their project’s success. Over time, contributions decline as others get bored and move on, but the project is still in active use, leaving one or two people to figure out how to keep it alive.
    </p>
    <p class="c4">
      Another growing issue in today’s software world, with so many new and inexperienced developers, is that security concepts are not taught or prioritized. New developers simply want to write code that works; they don’t know how to make software secure, or they mistakenly assume that the public code they use in their software has been audited for security. Even best practices around safely disclosing or managing vulnerabilities are not commonly taught or understood. Security only becomes an issue once a developer’s code has become compromised.
    </p>
    <p class="c4">
      Christopher Allen coauthored the first version of the Transport Layer Security (TLS) protocol, whose subsequent versions became a security standard used almost universally 
      online
      , including by websites like Google, Facebook and YouTube. Although today it is a standard, of its origins, Christopher writes:
    </p>
    <p class="c3">
      <span class="c6">As the co-author of TLS I would not have predicted 15 years later that over half of the Internet would be using an implementation of TLS maintained by a 1/4 time engineer. This lack of support led to the infamous Heartbleed bug. I tell my cryptocurrency colleagues this story today to warn them that their leading edge crypto today may be “boring” in a decade and suffer the same fate as it will no longer be exciting and their future hard work may be compromised.</span>
      <sup>
        <a href="appendix.xhtml#ftnt99" id="ftnt_ref99">[99]</a>
      </sup>
    </p>
    <p class="c4">
      Finally, the stability of our software potentially relies upon the good faith and cooperation of hundreds of developers, which introduces significant risk. The fragility of our digital infrastructure was recently demonstrated by a developer named 
      Azer Koçulu.
    </p>
    <p class="c4">
      Azer, a Node.js developer, hosted a number of libraries on a package manager platform called npm. After a conflict with npm over trademark rights on one of his projects, Azer, frustrated with the outcome, decided to remove everything he had ever published to npm.
      <sup>
        <a href="appendix.xhtml#ftnt100" id="ftnt_ref100">[100]</a>
      </sup>
       One of those libraries, left-pad, was referenced in hundreds of other software projects. Although it was just a few lines of code, by removing the left-pad project, Azer broke countless other software developers’ processes. Azer’s decision caused so many issues that npm made the unprecedented decision to republish his library, against Azer’s will, in order to restore functionality to the rest of the ecosystem.
      <sup>
        <a href="appendix.xhtml#ftnt101" id="ftnt_ref101">[101]</a>
      </sup>
       Npm also revised its policies to make it harder for developers to remove their libraries without warning, recognizing how individual actions could negatively affect so many others.
      <sup>
        <a href="appendix.xhtml#ftnt102" id="ftnt_ref102">[102]</a>
      </sup>
    </p>
    <p class="c4">
      <span class="c6">Software not getting the necessary maintenance it needs</span>
    </p>
    <p class="c4">
      Building digital infrastructure in a haphazard fashion means that all software gets built more slowly and inefficiently. One example of this can be found in the history of Python infrastructure.
    </p>
    <p class="c4">
      An important infrastructure project for Python developers is called Setuptools. Setuptools provides a set of tools that make writing Python easier and more standardized.
    </p>
    <p class="c4">
      Setuptools was written by a developer named PJ Eby in 2004. Over the next four years, Setuptools saw widespread adoption. However, Setuptools was difficult to implement and use, and Eby was largely unreceptive to outside contributions and fixes, wanting to maintain
      —as its original author—
      final say over Setuptools. In 2008, a group of developers, led by Tarek Ziade, decided to fork the project to force
       Eby to make 
      improvements
      . They called
       the new project Distribute.
    </p>
    <p class="c4">
      In 2013, these projects were 
      once again 
      merged under Setuptools. The multi
      -
      year rift, however, underscored
       both
       the dubious state of Python’s infrastructure tools, and 
      the difficulty of making
       improvements
      —in part 
      because there was nobody dedicated and willing to address the community’s problems.
    </p>
    <p class="c4">
      Python tools began to improve once the 
      working group 
      Python Packaging Authority (PyPA) was formed to focus specifically on setting better standards for packaging. One developer, Donald Stufft, made Python packaging tools his primary focus and was hired by HP (now under HPE) in May 2015 to continue his work. (His story will be discussed later in this report.)
      <sup>
        <a href="appendix.xhtml#ftnt103" id="ftnt_ref103">[103]</a>
      </sup>
    </p>
    <p class="c4">
      Another example involves RubyGems.org, a website that most Ruby developers use to host their Ruby libraries. Ruby has been used to build major websites including Twitter, AirBnB, YellowPages
      ,
       and GitHub itself.
    </p>
    <p class="c4">
      In 2013, a security flaw in 
      RubyGems.org
       was discovered, but went unfixed for several days, because 
      RubyGems.org
       was maintained entirely by volunteers. The volunteers planned to address it that weekend, but in the meantime someone else discovered the flaw and hacked the 
      RubyGems.org
       server. Following the hack, the servers had to be rebuilt from scratch. Several volunteers took time off work, and some even took personal vacation days, in order to get 
      RubyGems.org
       up and running again as soon as possible. 
      Because RubyGems.org is a critical piece of Ruby infrastructure, the security issue affected many developers and companies in turn.
    </p>
    <p class="c4">
      The incident highlighted how pure volunteer labor limited the amount of security and reliability that could be provided to important software infrastructure. Dozens of developers “volunteered” during the incident, since the problem affected their regular jobs. Unfortunately, none of them had the previous experience needed to be helpful, and none of them continued to offer to help once the servers were repaired. In 2015, an organization called Ruby Together was formed to help pay pay for maintenance and development of Ruby’s infrastructure, including RubyGems.org, using company sponsorships.
      <sup>
        <a href="appendix.xhtml#ftnt104" id="ftnt_ref104">[104]</a>
      </sup>
    </p>
    <p class="c4">
      <span class="c6">Loss of qualified labor</span>
    </p>
    <p class="c4">
      Like any community of volunteers, burnout is common among open source contributors, who find themselves fielding requests
      ,
       from both individual users and companies
      ,
       for work without compensation.
    </p>
    <p class="c4">
      Many developers have stories about getting requests from companies for free work. Daniel Roy Greenfeld, a Python and Django developer, wrote:
    </p>
    <p class="c3">
      <span class="c15 c6 c8">I personally get regular </span>
      <span class="c15 c1 c8">demands</span>
      <span class="c15 c6 c8"> for unpaid work (Discussions about payment for work always stall) by healthy high profit companies large and small for [my projects]. If I don't respond in a timely fashion, if I'm not willing to accept a crappy pull request, I/we get labeled a jerk. </span>
      <span class="c15 c1 c8">There is nothing like having core Python/PyPA maintainers working for Redhat [sic] demanding unpaid work while criticizing what they consider your project's shortcomings to ruin your day and diminish your belief in open source.</span>
      <sup class="c8 c15">
        <a href="appendix.xhtml#ftnt105" id="ftnt_ref105">[105]</a>
      </sup>
    </p>
    <p class="c4">
      (Red Hat is a multinational software company with annual revenue exceeding $2B which sells open source software solutions to enterprise customers.
      <sup>
        <a href="appendix.xhtml#ftnt106" id="ftnt_ref106">[106]</a>
      </sup>
       Because of the nature of their business, Red Hat employees use and contribute to many open source projects; in some ways, Red Hat has become the business poster child of open source. The company’s financial success will be discussed later in this report.)
    </p>
    <p class="c4">
      Read the Docs, the aforementioned documentation hosting service, explicitly states on its website that they do not support custom company installations and private support.
      <sup>
        <a href="appendix.xhtml#ftnt107" id="ftnt_ref107">[107]</a>
      </sup>
       One of the maintainers, Eric Holscher, went as far as to comment, 
      <span class="c6">“Pretty sure there is very little value in Read the Docs being open source, as private users never contribute back, only ask for free support.”</span>
      <sup>
        <a href="appendix.xhtml#ftnt108" id="ftnt_ref108">[108]</a>
      </sup>
    </p>
    <p class="c4">
      Marquess, the OpenSSL contributor, made a tongue-in-cheek remark to these repeated requests in his post about funding:
    </p>
    <p class="c3">
      <span class="c6">I’m looking at you, Fortune 1000 companies. The ones who include OpenSSL in your firewall/appliance/cloud/financial/security products that you sell for profit, and/or who use it to secure your internal infrastructure and communications. </span>
      <span class="c1">The ones who don’t have to fund an in-house team of programmers to wrangle crypto code, and who then nag us for free consulting services when you can’t figure out how to use it. </span>
      <span class="c6">The ones who have never lifted a finger to contribute to the open source community that gave you this gift. You know who you are.</span>
      <sup>
        <a href="appendix.xhtml#ftnt109" id="ftnt_ref109">[109]</a>
      </sup>
    </p>
    <p class="c4">
      Some developers choose to stop maintaining their projects because they no longer have the time to dedicate to it, and hope that somebody else picks up where they left off. Meanwhile, companies, governments and individuals depend on these libraries for their continued use, unaware of the underlying situation.
    </p>
    <p class="c4">
      David Michael Ross, an engineering manager at a web agency, wrote of his experience:
    </p>
    <p class="c3">
      <span class="c6">That's the big thing for me. [...] It's knowing you did something for free, out of love, and there's an endless stream out people going "more! more!" and getting angry when you won't accommodate their edge case.</span>
    </p>
    <p class="c3">
      <span class="c6">I had my phone number on one of my personal sites so friends could get in touch with me. Took it down after a week because people would call me in the middle of the day for plugin support, even though there's a forum for support. There's nothing inherently wrong with that, it just wears you down. Makes you afraid to check email or answer the phone.</span>
      <sup class="c6">
        <a href="appendix.xhtml#ftnt110" id="ftnt_ref110">[110]</a>
      </sup>
    </p>
    <p class="c4">
      Ryan Bigg, who writes documentation for the software framework Ruby on Rails, announced in November 2015 that he was quitting all open source work, explaining:
    </p>
    <p class="c3">
      <span class="c6">I do not have the time or energy to invest in open source any more. I am not being paid at all to do any open source work, and so the work that I do there is time that I could be spending doing "life stuff," or writing. It is not fair to expect me to do even more work outside of my regular work, and then not get fairly compensated (time or money) for it. It's also a great recipe for burnout and making me just generally grumpy.</span>
      <sup>
        <a href="appendix.xhtml#ftnt111" id="ftnt_ref111">[111]</a>
      </sup>
    </p>
    <p class="c4">
      Loss of qualified labor also does not just refer to open source contributors who quit, but those who never join in the first place.
    </p>
    <p class="c4">
      T
      here are very few statistics on the demographics of open source contributors, which is telling in itself. A recent analysis of GitHub found that just 5.4% of open source contributors were women, compared to roughly 15 to 20% of technical roles at software companies overall.
      <sup>
        <a href="appendix.xhtml#ftnt112" id="ftnt_ref112">[112]</a>
      </sup>
    </p>
    <p class="c4">
      One reason why open source contributors are strikingly more homogenous than the technology sector at large is that they need time and money to make significant contributions in the first place. These constraints prevent otherwise qualified contributors from entering the space.
    </p>
    <p class="c4">
      David MacIver, creator of Hypothesis, a Python library for testing software applications, explains why he was able to spend so much time on the project:
    </p>
    <p class="c3">
      <span class="c6">I could only do this because I had the time and money to do so. I had the time to do so because I was being obsessive, had no dependents, and didn’t have a job. I could only not have a job because of the money. I only had the money because I spent the latter half of last year with double the salary I was used to, half the living expenses I was used to, and too borderline depressed to spend it on anything interesting. These are not reasonable requirements. [...] Can you produce quality software in less time than that, working only in your free time? I doubt it.</span>
      <sup class="c8 c21">
        <a href="appendix.xhtml#ftnt113" id="ftnt_ref113">[113]</a>
      </sup>
    </p>
    <p class="c4">
      Cory Benfield, a core Python developer, writes:
    </p>
    <p class="c3">
      <span class="c6">Generally speaking, people who aren’t cisgender, heterosexual, white, middle-class, English-speaking men are less able to tolerate the increased financial risk of not having a steady job. This means that those individuals really need a steady pay cheque to contribute most effectively. And we *need* those contributors: diverse teams make better things than homogeneous teams.</span>
      <sup class="c6">
        <a href="appendix.xhtml#ftnt114" id="ftnt_ref114">[114]</a>
      </sup>
    </p>
    <p class="c4">
      Charlotte Spencer, a contributor to software framework Hoodie and database PouchDB, echoes these sentiments:
    </p>
    <p class="c3">
      <span class="c6">All my contributions are purely volunteered. I don't make any money, though I would absolutely like to. I have asked veteran open sourcerers if they are paid and they say they are not, which discouraged me from pursuing anything (if they aren't paid, why would I be?). I use most of my free time to do it, which I'm trying to do less of as it was taking up my life.</span>
      <sup class="c6">
        <a href="appendix.xhtml#ftnt115" id="ftnt_ref115">[115]</a>
      </sup>
    </p>
    <p class="c4">
      Jessica Lord, a developer, actively contributed to open source while working at Code for America, a nonprofit organization that supports technology in the public sector. An urban planner by education, she stresses that she had 
      <span class="c6">“no computer science degree, no real production programing [sic] experience but a GitHub portfolio.”</span>
      <sup>
        <a href="appendix.xhtml#ftnt116" id="ftnt_ref116">[116]</a>
      </sup>
      <span class="c6"> </span>
      Her regular contributions drew the attention of GitHub itself, where she now works today.
    </p>
    <p class="c4">
      However, Jessica points out that she was able to contribute to open source under a “privileged” set of circumstances: she took a pay cut to work at Code for America, burned through her savings, worked “nearly constantly” on open source projects, and had a community of support.
    </p>
    <p class="c4">
      Of lack of diversity in open source, Jessica writes:
    </p>
    <p class="c3">
      <span class="c6">The value of common knowledge cannot be overestimated. We must to do better. We need all the ideas from all the people. That's what we should be aiming for.</span>
    </p>
    <p class="c3">
      <span class="c6">We need an open source for everyone. Not just for the privileged and not even just for the developers.</span>
      <sup class="c6">
        <a href="appendix.xhtml#ftnt117" id="ftnt_ref117">[117]</a>
      </sup>
    </p>
    <p class="c4">
      Jessica’s last point also underlines how enabling more diverse perspectives in open source can help sustain open source itself. From a functional perspective, the vast majority of open source contributors are developers, but plenty of other roles are needed to sustain larger projects, including writing, project management, and outreach. Open source projects are not dissimilar from other types of organizations, including startups, where administration, marketing, design, and other roles are needed to support an organization’s raw output. It is partially because open source culture is so heavily weighted to developers that sustainability is rarely discussed or acted upon.
    </p>
    <p class="c4">
      Finally, the homogeneity of open source contributors impacts diversity efforts in technology at large, because it is so closely tied to hiring. As previously mentioned, many employers use open source contributions, including GitHub profiles, to discover potential new hires or to check a candidate’s qualifications. Employers who rely heavily upon evidence of open source contributions are drawing from an extremely narrow pool of candidates.
    </p>
    <p class="c4">
      Ashe Dryden, in an influential essay called “The Ethics of Unpaid Labor and the OSS Community,” explained:
    </p>
    <p class="c3">
      <span class="c6">Deciding that someone is a good programmer based solely on their publicly available code excludes far more than marginalized people. It also excludes anyone who can't release their code publicly because of licensing or security reasons. This also includes a large number of freelancers and contractors who are unable to publicly claim that they worked on a project for legal reasons (NDAs, for instance). </span>
      <span class="c1">In an industry where we are struggling to find enough talent, why are we artificially limiting the talent pool?</span>
      <sup>
        <a href="appendix.xhtml#ftnt118" id="ftnt_ref118">[118]</a>
      </sup>
    </p>
    <p class="c4">
      How can we mitigate or avoid some of these costs associated with participating in the building of digital infrastructure today? First, let’s look at how infrastructure projects are currently supported.
    </p>
  </body>
</html>
