<?xml version="1.0" encoding="UTF-8"?>
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <title>Roads and Bridges</title>
    <meta charset="UTF-8"/>
    <link rel="stylesheet" href="style.css"/>
  </head>
  <body>
    <p class="c4">
      <span class="c1 c10">How software gets built</span>
    </p>
    <p class="c4">
      <span>Every website or mobile app we use, no matter how simple, is made up of many smaller components, just as a building is made up of bricks and concrete.</span>
    </p>
    <p class="c0">
      <span/>
    </p>
    <p class="c4">
      <span>For example, imagine you want to post a photo to Facebook. You open your Facebook mobile app, which triggers Facebook’s software to show your news feed.</span>
    </p>
    <p class="c0">
      <span/>
    </p>
    <p class="c4">
      <span>You upload a photo from your phone, add a comment, then hit “submit.” Another part of </span>
      <span>Facebook’s</span>
      <span> software, responsible for storing</span>
      <span> data,</span>
      <span> remembers who you are and posts the photo to your profile.</span>
    </p>
    <p class="c0">
      <span/>
    </p>
    <p class="c4">
      <span>Finally, a third part of Facebook’s software takes the information that you typed into your phone and shows it to all your friends around the world.</span>
    </p>
    <p class="c0">
      <span/>
    </p>
    <p class="c4">
      <span>Although these interactions take place on Facebook, Facebook did not actually build all the pieces necessary to make it possible for you to post to their app. Instead, they use free, public code, made available on the Internet by volunteers for anybody to use. Facebook does not publicly list the projects they use, but another company they own, Instagram, lists and thanks some of these projects on their homepage and mobile app.</span>
      <sup>
        <a href="appendix.xhtml#ftnt10" id="ftnt_ref10">[10]</a>
      </sup>
    </p>
    <p class="c0">
      <span/>
    </p>
    <p class="c4">
      <span>Using public code is more efficient for a company like Facebook than building every piece themselves. Building software is like constructing a building. A construction company wouldn’t build its hammers and drills from scratch, or source and chop all of the lumber themselves. Instead, it buys the tools from a hardware store, and the lumber from a third-party supplier, to make the job go faster.</span>
    </p>
    <p class="c0">
      <span/>
    </p>
    <p class="c4">
      <span>Thanks to permissive licenses, companies like Facebook or Instagram are not obligated to pay for this </span>
      <span>code</span>
      <span>, but are free to profit handsomely from it. This is not unlike a trucking company (Instagram) using a highway (public code) to transport goods for commercial purposes (Instagram’s app).</span>
    </p>
    <p class="c0">
      <span/>
    </p>
    <p class="c4">
      <span>Mike Krieger, one of Instagram’s cofounders, emphasized this point in 2013, encouraging other founders to </span>
      <span class="c6">“borrow instead of building whenever possible. There are hundreds of fantastic [tools]...that can save you time and let you focus on actually building out your product.”</span>
      <sup class="c6">
        <a href="appendix.xhtml#ftnt11" id="ftnt_ref11">[11]</a>
      </sup>
    </p>
    <p class="c0">
      <span/>
    </p>
    <p class="c4">
      <span>Some tools</span>
      <span> that a software company uses are:</span>
    </p>
    <p class="c0">
      <span/>
    </p>
    <ul class="c14 lst-kix_s3ralfni3os7-0 start">
      <li class="c3 c9">
        <span class="c7">Frameworks: </span>
        <span>Software frameworks provide basic scaffolding and structure. Think of it as the blueprint for the entire application. Like a blueprint, a framework lays out how the application might look on mobile, or how information gets saved into the database. Examples include Rails and Django.</span>
      </li>
      <li class="c3 c9">
        <span class="c7">Languages:</span>
        <span> Programming languages are the communication backbone of software, like construction workers on a building site using English to communicate. Languages help different software components perform actions and talk to one another. For example, if you create an account on a website and click “sign up,” that application might use the languages JavaScript and Ruby to tell the database to save your information. Popular examples of languages include JavaScript, Python and C.</span>
      </li>
      <li class="c3 c9">
        <span class="c7">Libraries:</span>
        <span> Libraries are “prefabricated” pieces of code that make it faster to write software, just as a construction company might buy prefabricated windows instead of building them from scratch. For example, instead of a developer writing their own user login system for an application, they can use a library called OAuth. Instead of writing their own code to visualize data on a website, they can use a library called d3.</span>
      </li>
      <li class="c3 c9">
        <span class="c7">Databases:</span>
        <span> Databases store information (for example, user profiles, email addresses, or credit card information) so that it can be used throughout the application. Whenever an application needs to remember something about you, it stores that information in the database. Popular examples of databases include MySQL and PostgreSQL.</span>
      </li>
      <li class="c3 c9">
        <span class="c7">Web and application s</span>
        <span class="c7">ervers:</span>
        <span> Web and application servers facilitate various requests that users make on the Internet. They can be thought of as dispatchers or telephone operators. For example, if you type a URL into your browser bar, a Web server will send back the associated page. If you send a message to a friend on Facebook, your message first goes to an application server, which determines who you are trying to contact, then routes your message to your friend’s account. </span>
        <span>Popular examples of Web servers are Apache and Nginx.</span>
      </li>
    </ul>
    <p class="c0">
      <span/>
    </p>
    <p class="c4">
      <span>Some of these tools, such as servers and databases, cost money, especially as companies scale. This makes them easier to monetize. For example, Heroku, a cloud-based platform that offers server and database support, offers basic services for free, but charges for higher levels of data or traffic. Heroku powers many major websites, including Toyota and Macy’s, and was acquired by Salesforce.com in 2010 for $212M.</span>
      <sup>
        <a href="appendix.xhtml#ftnt12" id="ftnt_ref12">[12]</a>
      </sup>
    </p>
    <p class="c0">
      <span/>
    </p>
    <p class="c4">
      <span>Other types of developer tools, such as frameworks, many libraries, and programming languages, are harder to charge for, and are often built and maintained by volunteers.</span>
    </p>
    <p class="c0">
      <span/>
    </p>
    <p class="c4">
      <span>Because these types of tools look more like information goods than services that can be turned on or off, charging for them would severely limit their adoption. As a result, anyone—whether a billion-dollar company or a teenage coder—can use these components to build their own software for free.</span>
    </p>
    <p class="c0">
      <span/>
    </p>
    <p class="c4">
      <span>For example, one of the libraries that Instagram uses, according to its homepage, is Appirater. Appirater is a library that makes it easy to remind iPhone users to rate a mobile app. It was created in 2009 by Arash Payan, a freelance developer based in Los Angeles. Payan does not make any income from the project.</span>
    </p>
    <p class="c0">
      <span/>
    </p>
    <p class="c4">
      <span>It is the equivalent of lumberyards, concrete plants and hardware stores donating their raw materials to a construction company</span>
      <span>, then continuing to support the company’s needs.</span>
    </p>
    <p class="c0">
      <span/>
    </p>
    <p class="c0">
      <span/>
    </p>
    <p class="c4">
      <span class="c1 c10">How not charging for software transformed society</span>
    </p>
    <p class="c4">
      <span>An expected first reaction is: </span>
      <span class="c6">“Why did these developers make their software free? Why not just charge for it?”</span>
    </p>
    <p class="c0">
      <span/>
    </p>
    <p class="c4">
      <span>The reasons for public software lie in its rich political and social history. But first, let’s examine a hard truth: our society wouldn’t be where it is today if developers hadn’t made it free.</span>
    </p>
    <p class="c0">
      <span/>
    </p>
    <p class="c4">
      <span class="c6">Free software makes it exponentially cheaper and easier to build </span>
      <span class="c6">software</span>
      <span class="c6">.</span>
    </p>
    <p class="c4">
      <span>Uber, a transportation service, recently announced that some developers had built a way to request cars through Slack, a team collaboration app, instead of using Uber’s own mobile app. The project was completed in 48 hours by a team of developers at App Academy, a coding school.</span>
    </p>
    <p class="c0">
      <span/>
    </p>
    <p class="c4">
      <span>Uber noted that the team was able to get the project done quickly because they </span>
      <span class="c6">“implemented open libraries such as </span>
      <span class="c6">rails</span>
      <span class="c6">, geocoder, and unicorn [sic] to speed up development and build on a solid foundation.”</span>
      <sup>
        <a href="appendix.xhtml#ftnt13" id="ftnt_ref13">[13]</a>
      </sup>
    </p>
    <p class="c0">
      <span/>
    </p>
    <p class="c4">
      <span>In other words, the amount of coding that the team had to do themselves was greatly reduced because they were able to use free libraries built by others.</span>
    </p>
    <p class="c0">
      <span/>
    </p>
    <p class="c4">
      <span>Ruby Geocoder, for example, is a library built in 2010 and maintained by a freelance developer named Alex Reisner. Geocoder makes it easy for an application to look up street addresses and geographic coordinates.</span>
      <sup>
        <a href="appendix.xhtml#ftnt14" id="ftnt_ref14">[14]</a>
      </sup>
    </p>
    <p class="c0">
      <span/>
    </p>
    <p class="c4">
      <span>Unicorn is a server, built in 2009, which is maintained by a team of seven contributors listed on its website and headed by a developer named Eric Wong.</span>
      <sup>
        <a href="appendix.xhtml#ftnt15" id="ftnt_ref15">[15]</a>
      </sup>
    </p>
    <p class="c0">
      <span/>
    </p>
    <p class="c4">
      <span>It’s easier than ever to build new software, because there are more prefabricated pieces of code to draw from. To return again to the construction metaphor instead of constructing every piece of a building from scratch, one can simply buy a prefabricated framework, foundation and walls, then put them together like Legos.</span>
    </p>
    <p class="c0">
      <span/>
    </p>
    <p class="c4">
      <span>As a result, new developers are minted every day, even if they themselves don’t necessarily know how to build the tools from scratch. The Bureau of Labor Statistics expects the number of employed software developers to rise 22% from 2012 to 2022—much faster than average, compared to other occupations.</span>
      <sup>
        <a href="appendix.xhtml#ftnt16" id="ftnt_ref16">[16]</a>
      </sup>
    </p>
    <p class="c0">
      <span/>
    </p>
    <p class="c4">
      <span class="c6">Free software is directly responsible for today’s current startup renaissance.</span>
    </p>
    <p class="c0">
      <span class="c6"/>
    </p>
    <p class="c4">
      <span>The cost of starting a company has dropped dramatically since the first dotcom boom in the late 1990s. Venture capitalist and former entrepreneur Mark Suster reflected on his experience in a 2011 blog post:</span>
    </p>
    <p class="c0">
      <span/>
    </p>
    <p class="c3">
      <span class="c6">When I built my first company starting in 1999 it cost $2.5 million in infrastructure just to get started and another $2.5 million in team costs to code, launch, manage, market &amp; sell our software. […]</span>
    </p>
    <p class="c3 c13">
      <span class="c6"/>
    </p>
    <p class="c3">
      <span class="c6">The first major change in our industry was imperceptible to us as an industry. It was driven by the introduction of open-source software, most notably what was called the LAMP stack. Linux (instead of UNIX), Apache (web server software), MySQL (instead of Oracle) and PHP. Of course there were variants – we preferred PostGres to MySQL and many people used other programming languages than PHP.</span>
    </p>
    <p class="c3 c13">
      <span class="c6"/>
    </p>
    <p class="c3">
      <span class="c6">Open source became a movement – a mentality. Suddenly infrastructure software was nearly free. We paid 10% of the normal costs for the software and that money was for software support. A 90% disruption in cost spawns innovation – believe me.</span>
      <sup class="c6">
        <a href="appendix.xhtml#ftnt17" id="ftnt_ref17">[17]</a>
      </sup>
    </p>
    <p class="c0">
      <span class="c6"/>
    </p>
    <p class="c4">
      <span>The availability of free software components today (as well as cheaper hosting and cloud services, like Amazon Web Services and Heroku) means that a technology startup no longer requires millions of dollars to get off the ground. Entrepreneurs can conceivably release a product and find a market without spending a single dollar, then raise money from venture capitalists only after they’ve shown strong signs of demand.</span>
    </p>
    <p class="c0">
      <span/>
    </p>
    <p class="c4">
      <span>Alan Schaaf, the founder of Imgur, a popular image-sharing site and one of the top 50 most-trafficked sites in the world, famously said that the only money he ever spent to start the company was seven dollars to purchase the domain </span>
      <span>name</span>
      <span>. Imgur was profitable, and Schaaf did not take any outside money for 5 years before raising $40 million from VC firm Andreessen Horowitz in 2014.</span>
      <sup>
        <a href="appendix.xhtml#ftnt18" id="ftnt_ref18">[18]</a>
      </sup>
    </p>
    <p class="c0">
      <span/>
    </p>
    <p class="c4">
      <span>Venture capitalists and other institutional investors, in turn, have started writing smaller checks to companies, giving rise to new subsets of investing, including:</span>
    </p>
    <p class="c0">
      <span/>
    </p>
    <ul class="c14 lst-kix_9hgqi3px5elc-0 start">
      <li class="c3 c9">
        <span class="c6">Seed stage: </span>
        <span>V</span>
        <span>enture firms providing the first round of funding, rather than later-stage growth capital</span>
      </li>
      <li class="c3 c9">
        <span class="c6">Micro VCs: </span>
        <span>V</span>
        <span>enture firms loosely defined as less than $50 million under management</span>
      </li>
      <li class="c3 c9">
        <span>A</span>
        <span class="c6">ccelerators: </span>
        <span>F</span>
        <span>irms that provide small amounts of capital, often less than $50,000, as well as advice and mentorship to early-stage companies</span>
      </li>
    </ul>
    <p class="c0">
      <span/>
    </p>
    <p class="c4">
      <span>$10M can fund a hundred companies today, compared to one or two in the 1990s.</span>
    </p>
    <p class="c0">
      <span/>
    </p>
    <p class="c4">
      <span class="c6">Free software made it easier for people of all demographics to learn to code, making technology accessible to the world.</span>
    </p>
    <p class="c0">
      <span class="c6"/>
    </p>
    <p class="c4">
      <span>If you wanted to learn how to code at home today, you might start by learning Ruby on Rails. Rails is a popular software framework and Ruby is a programming language. Anyone with Internet access can install these tools on any computer for free. Because they are free, they are also very popular, which means there is plenty of information online to help you get started, from formal tutorials to question-and-answer forums. This means that learning how to code is as accessible as teaching oneself to read and write English or French.</span>
    </p>
    <p class="c0">
      <span/>
    </p>
    <p class="c4">
      <span>By comparison, software frameworks and languages that were not open source required paying for access, using specific operating systems or other tools, and agreeing to licensing constraints that could affect patents for any software built using the framework. Today, it is difficult to find examples of frameworks and languages that are not open source. One of the most famous examples of a proprietary software framework is .NET, developed and released in 2002. In 2014, Microsoft announced that they were releasing a version of .NET as an open source project, called .NET Core.</span>
    </p>
    <p class="c0">
      <span/>
    </p>
    <p class="c4">
      <span>Audrey Eschright, a software developer, wrote about how open source software helped her learn to code as a teenager in the late 1990s:</span>
    </p>
    <p class="c0">
      <span/>
    </p>
    <p class="c3">
      <span class="c6">I wanted to learn to program but I didn’t have money. Not the college student version of not having money—my family situation was low-income, but also highly chaotic….This is going to seem strange to anyone [today], but at the time there were basically two options for someone who wanted to write real software: you could use a PC with Windows and pay extra for Microsoft’s development tools, or you could have access to a Unix system and use gcc….So my goal became to get access to accounts on Unix systems so I could learn how to write code and do cool stuff.</span>
      <sup>
        <a href="appendix.xhtml#ftnt19" id="ftnt_ref19">[19]</a>
      </sup>
    </p>
    <p class="c0">
      <span/>
    </p>
    <p class="c4">
      <span>Jeff Atwood, a longtime .NET developer, described his decision to use Ruby for a new software project, Discourse, in 2013:</span>
    </p>
    <p class="c0">
      <span/>
    </p>
    <p class="c3">
      <span class="c6">Getting up and running with a Microsoft stack is just plain too hard for a developer in, say, Argentina, or Nepal, or Bulgaria. Open source operating systems, languages, and tool chains are the great equalizer, the basis for the next great generation of programmers all over the world who are going to help us change the world.</span>
      <sup>
        <a href="appendix.xhtml#ftnt20" id="ftnt_ref20">[20]</a>
      </sup>
    </p>
    <p class="c0">
      <span/>
    </p>
    <p class="c4">
      <span>With the explosion of startups have come a number of initiatives to teach people to code, whether they are children, teenagers, underserved minorities, women or career switchers. Some examples include Women Who Code, Django Girls, Black Girls Code, One Month and Dev Bootcamp.</span>
    </p>
    <p class="c0">
      <span/>
    </p>
    <p class="c4">
      <span>Some of these organizations are free, while others charge tuition. All of them rely upon free software to teach their students. For example, Django Girls has taught over 2,000 women to code</span>
      <span>,</span>
      <span> in 49 countries around the world.</span>
      <sup>
        <a href="appendix.xhtml#ftnt21" id="ftnt_ref21">[21]</a>
      </sup>
      <span> Although the organization did not develop Django themselves, they are able to use Django</span>
      <span>,</span>
      <span> which students download and use for free</span>
      <span>, in their curriculum</span>
    </p>
    <p class="c0">
      <span/>
    </p>
    <p class="c4">
      <span>Dev Bootcamp teaches career </span>
      <span>switchers</span>
      <span> to code, preparing everyone from English teachers to military veterans to become professional software developers. The program costs $12-14,000. Dev Bootcamp teaches Ruby, JavaScript, Ruby on Rails and SQL, among other components. All of these components are free for students to download and use, and Dev Bootcamp does not have to pay to use these materials. Dev Bootcamp was recently acquired by Kaplan for an undisclosed sum in 2014.</span>
      <sup>
        <a href="appendix.xhtml#ftnt22" id="ftnt_ref22">[22]</a>
      </sup>
    </p>
    <p class="c0">
      <span/>
    </p>
    <p class="c4">
      <span>If such critical pieces of software were not free, people from all walks of life would not be able to take part in today’s technology renaissance.</span>
      <span> There are still numerous social and economic barriers that prevent many more from participating, as well as costs associated with physical equipment like laptops and an Internet connection, but the programming tools themselves do not cost money.</span>
    </p>
    <p class="c0">
      <span/>
    </p>
    <p class="c0">
      <span/>
    </p>
    <p class="c4">
      <span class="c1 c10">A brief history of free and public software and the people who made it</span>
    </p>
    <p class="c4">
      <span>Now that we’ve covered how making software free benefits society, let’s look at how the software itself came about.</span>
    </p>
    <p class="c0">
      <span/>
    </p>
    <p class="c4">
      <span>Although we’ve used the term “free software” to refer to software that does not cost any money to its users, the term “free software” is actually a highly contextualized term that refers specifically to the software’s license properties. Free software advocates emphasize that “free” refers to a political freedom rather than the price, and sometimes use the Spanish word </span>
      <span class="c6">libre</span>
      <span> (meaning freedom, as opposed to </span>
      <span class="c6">gratis</span>
      <span>, the Spanish word for free price) to clarify the distinction.</span>
    </p>
    <p class="c0">
      <span/>
    </p>
    <p class="c4">
      <span>In the 1970s, when computers were still a nascent technology, programmers had to build their own computers and write custom software themselves. Software was not yet standardized and was not considered to be a monetizable product.</span>
    </p>
    <p class="c0">
      <span/>
    </p>
    <p class="c4">
      <span>In 1981, IBM introduced the “IBM PC,” or “Personal Computer,” bringing hardware to a mass market. Within a couple of years, custom computer setups fell away as everybody adopted the IBM standard. IBM became the dominant computer within a highly fractured personal computer market, capturing over half of market share by 1986.</span>
      <sup>
        <a href="appendix.xhtml#ftnt23" id="ftnt_ref23">[23]</a>
      </sup>
    </p>
    <p class="c0">
      <span/>
    </p>
    <p class="c4">
      <span>Along with standardized hardware, then, came an opportunity for standardized software. Suddenly everyone wanted to turn software into a business. IBM hired a then-unknown company called Microsoft to write the operating system for its new PC. That operating system, MS-DOS, was released in 1981. Other companies began to follow suit, offering software under commercial licenses. These licenses prevented the user from copying, modifying or redistributing the software.</span>
    </p>
    <p class="c0">
      <span/>
    </p>
    <p class="c4">
      <span>Proprietary software still exists today: for example, Adobe Photoshop, Microsoft Windows, or GoToMeeting. While proprietary software can be profitable for the company that builds and licenses the product, its restrictions also</span>
      <span> limit its scope and distribution.</span>
      <span> Any changes to the software’s design or implementation have to originate from the company itself. And proprietary software is expensive, often costing hundreds of dollars and permitting the designated purchaser to use only that copy.</span>
    </p>
    <p class="c0">
      <span/>
    </p>
    <p class="c4">
      <span>Understandably, some computer scientists felt concerned about the closed and proprietary direction that software was taking, believing that it undermined the true potential of software. Richard Stallman, a programmer at the MIT Artificial Intelligence Laboratory, felt particularly strongly about the need for software to be free and modifiable.</span>
    </p>
    <p class="c0">
      <span/>
    </p>
    <p class="c4">
      <span>Over the next couple of years, as several of his colleagues began working on proprietary software projects, Stallman felt he could not ignore the situation any longer. In 1983, he launched GNU, a free operating system, and in doing so sparked what came to be known as the “free software movement,” which galvanized a group of people who believed that software could have a greater reach and benefit to society if it were made freely available. Stallman later founded the Free Software Foundation in 1985 to support GNU and other free software efforts.</span>
    </p>
    <p class="c0">
      <span/>
    </p>
    <p class="c4">
      <span>The Free Software Foundation defines free software as “software that gives the user the freedom to share, study and modify it.”</span>
      <sup>
        <a href="appendix.xhtml#ftnt24" id="ftnt_ref24">[24]</a>
      </sup>
      <span> GNU defines four freedoms associated with such software:</span>
    </p>
    <p class="c0">
      <span/>
    </p>
    <ul class="c14 lst-kix_9julyt5sr0dr-0 start">
      <li class="c3 c9">
        <span class="c6">The freedom to run the program as you wish, for any purpose </span>
        <span class="c6">(freedom 0)</span>
        <span class="c6">.</span>
      </li>
      <li class="c3 c9">
        <span class="c6">The freedom to study how the program works, and change it so it does your computing as you wish (freedom 1).</span>
      </li>
      <li class="c3 c9">
        <span class="c6">The freedom to redistribute copies so you can help your neighbor (freedom 2).</span>
      </li>
      <li class="c3 c9">
        <span class="c6">The freedom to distribute copies of your modified versions to others (freedom 3). By doing this you can give the whole community a chance to benefit from your changes.</span>
        <sup>
          <a href="appendix.xhtml#ftnt25" id="ftnt_ref25">[25]</a>
        </sup>
      </li>
    </ul>
    <p class="c0">
      <span/>
    </p>
    <p class="c4">
      <span>The free software movement was, and continues to be, deeply rooted in social advocacy. In 1998, when Netscape released the source code for its popular browser, the conversation began to shift from politics to technology.</span>
    </p>
    <p class="c0">
      <span/>
    </p>
    <p class="c4">
      <span>Some technologists believed that focusing on the practical benefits of free software would help bring its message to a wider audience. For example, they pointed out that free software was cheaper to build and could lead to superior software, because the public can find bugs and contribute fixes. This type of pragmatism was distinct from the moral obligation that Stallman and his supporters believed they had to promote free software.</span>
    </p>
    <p class="c0">
      <span/>
    </p>
    <p class="c4">
      <span>These technologists gathered in Palo Alto for a strategy session. Christine Peterson, a nanotechnologist in attendance, suggested the term “open source</span>
      <span>.</span>
      <span>”</span>
      <sup>
        <a href="appendix.xhtml#ftnt26" id="ftnt_ref26">[26]</a>
      </sup>
      <span> Shortly after, two attendees, Bruce Perens and Eric Raymond, created the Open Source Initiative.</span>
    </p>
    <p class="c0">
      <span/>
    </p>
    <p class="c4">
      <span>Software whose source code is publicly available is called “open source</span>
      <span>.</span>
      <span>” It is analogous to being able to open up the hood of a car and see what's inside, instead of </span>
      <span>having </span>
      <span>the engine sealed off from view. Open source licenses always include a provision that allows the public to use, modify</span>
      <span>,</span>
      <span> and redistribute the code.</span>
      <span> In this sense, there is no legal difference between free software and open source licenses. Indeed, some people have called open source a </span>
      <span>“</span>
      <span>marketing campaign</span>
      <span>”</span>
      <span> for free software.</span>
    </p>
    <p class="c0">
      <span/>
    </p>
    <p class="c4">
      <span>However, the most important distinction is the </span>
      <span>differing </span>
      <span>culture</span>
      <span>s</span>
      <span> that each movement created. The open source software movement broke away from the social and political associations with free software by instead focusing on the practical benefits of software development and encouraging wider creative and business applications. As Stallman himself wrote, </span>
      <span class="c6">“Open source is a development methodology; free software is a social movement.”</span>
      <sup>
        <a href="appendix.xhtml#ftnt27" id="ftnt_ref27">[27]</a>
      </sup>
    </p>
    <p class="c0">
      <span/>
    </p>
    <p class="c4">
      <span>Although “free software” and “open source software” are often discussed together, they are politically distinct, the former being more closely associated with </span>
      <span>ethics</span>
      <span> and the latter with pragmatism. (The remainder of this paper will use the term “open source” to emphasize the critical role it plays in software infrastructure.)</span>
    </p>
    <p class="c0">
      <span/>
    </p>
    <p class="c4">
      <span>Open source created space for growing distinctions and styles of software development, free from ethical complexities. One organization might release its source code to the public, but only accept changes from a couple of contributors. Another organization might require that the code is developed in public and accept changes from anyone, so that more people could take part in the process. In 1997, Raymond wrote an influential essay called </span>
      <span class="c6">The Cathedral and the Bazaar</span>
      <span> (later published as a book in 1999) which explored these styles.</span>
    </p>
    <p class="c0">
      <span/>
    </p>
    <p class="c4">
      <span>Today, open source has become a popular software practice for many reasons, in terms of both efficiency and cost. It’s also how much of digital infrastructure gets built. We’ve discussed how making this software more freely available has benefitted all of society, but open source has benefits for its creators, as well.</span>
    </p>
    <p class="c0">
      <span/>
    </p>
    <p class="c4">
      <span class="c6">Open source is cheaper to build.</span>
    </p>
    <p class="c4">
      <span>Before open source software existed, technology firms treated software like any other paid product: a team of employees built new software internally, then sold it to the public. While this meant software had a clear business model, it also came with increased development costs. Proprietary software requires a full-time paid team to support its development, including developers, designers, marketers, and lawyers. It’s far cheaper to simply crowdsource software, built and maintained by a community of volunteer developers.</span>
    </p>
    <p class="c0">
      <span class="c6"/>
    </p>
    <p class="c4">
      <span class="c6">Open source is easier to distribute.</span>
    </p>
    <p class="c4">
      <span>People are more likely to adopt software that is free to use and modify than software </span>
      <span>that </span>
      <span>cost</span>
      <span>s</span>
      <span> hundreds of dollars to license and was developed in a black box. Not only will developers want to use it for free, but they might be inclined to tell their friends to use it as well, amplifying the effects of its distribution.</span>
    </p>
    <p class="c0">
      <span/>
    </p>
    <p class="c4">
      <span class="c6">Open source is flexible to customize.</span>
    </p>
    <p class="c4">
      <span>Open source software is free to copy and modify for one’s own purposes, with various levels of permissiveness. This means that if a developer wants to make improvements to a piece of software, he or she can copy the project and change it. (This practice is called “forking</span>
      <span>.</span>
      <span>”) </span>
    </p>
    <p class="c0">
      <span/>
    </p>
    <p class="c4">
      <span>Many popular projects started as a modification of an existing piece of software, including </span>
      <span class="c6">WordPress</span>
      <span> (content management system that powers 23% of the world’s websites</span>
      <sup>
        <a href="appendix.xhtml#ftnt28" id="ftnt_ref28">[28]</a>
      </sup>
      <span>), </span>
      <span class="c6">PostgreSQL</span>
      <span> (one of the world’s most popular and fast-growing databases</span>
      <sup>
        <a href="appendix.xhtml#ftnt29" id="ftnt_ref29">[29]</a>
      </sup>
      <span>), </span>
      <span class="c6">Ubuntu</span>
      <span> (operating system used by 10% of the world’s websites</span>
      <sup>
        <a href="appendix.xhtml#ftnt30" id="ftnt_ref30">[30]</a>
      </sup>
      <span>), and </span>
      <span class="c6">Firefox</span>
      <span> (one of the most popular web browsers in the world</span>
      <sup>
        <a href="appendix.xhtml#ftnt31" id="ftnt_ref31">[31]</a>
      </sup>
      <span>).</span>
    </p>
    <p class="c0">
      <span/>
    </p>
    <p class="c4">
      <span>WordPress began as an offshoot of an existing blogging project, b2 (also known as cafelog). Two software developers, Matt Mullenweg and Mike Little, decided they wanted a better version of b2 and subsequently forked the project. Mullenweg decided to fork b2, rather than another project called TextPattern, because b2’s licenses were more permissive. His original thought process from 2003 is described below:</span>
    </p>
    <p class="c0">
      <span/>
    </p>
    <p class="c3">
      <span class="c6">What to do? Well, TextPattern looks like everything I could ever want, but it doesn’t look like it’s going to be licensed under something politically I could agree with. Fortunately, b2/cafelog is GPL [GNU General Public License, a free software license], which means that I could use the existing codebase to create a fork.[...]</span>
    </p>
    <p class="c3 c13">
      <span class="c6"/>
    </p>
    <p class="c3">
      <span class="c6">The work would never be lost, as if I fell of [sic] the face of the planet a year from now, whatever code I made would be free to the world, and if someone else wanted to pick it up they could.</span>
      <sup class="c6">
        <a href="appendix.xhtml#ftnt32" id="ftnt_ref32">[32]</a>
      </sup>
    </p>
    <p class="c0">
      <span/>
    </p>
    <p class="c4">
      <span>If software were developed in a closed, proprietary environment, developers would have no ability to change that software, unless they worked at the company. If they tried to build their own improved version to imitate the original, they might face intellectual property concerns. With open source software, the developer can simply change the software him- or herself and release it to the public, as Mullenweg did. Open source software, then, enables rapid proliferation of ideas.</span>
    </p>
    <p class="c0">
      <span class="c6"/>
    </p>
    <p class="c4">
      <span class="c6">Open source gives employees more bargaining power.</span>
    </p>
    <p class="c4">
      <span>Software takes time to learn, whether it’s a new programming language or framework. If every company used a proprietary set of tools, developers would be less inclined to change jobs, because their technical skills only apply to that one place of employment. They would have to be retrained in a new technology at their next place of employment.</span>
      <sup>
        <a href="appendix.xhtml#ftnt33" id="ftnt_ref33">[33]</a>
      </sup>
    </p>
    <p class="c0">
      <span/>
    </p>
    <p class="c4">
      <span>When companies use open source technology, a developer has a reusable set of skills, which leads to more freedom to work wherever he or she prefers. For example, multiple companies might use the same Ruby programming language in their software. In addition, if the company’s product itself is open source, the output belongs to the developer as much as it does the company. The developer can take their work with them if they choose to leave the company (versus, for example, being constrained by a non-disclosure agreement, if the code were proprietary). All of these benefits give the employee more agency than he or she would have had with proprietary software. Many companies today advertise their use of open source software as a recruiting tactic, because it favors the developer.</span>
    </p>
    <p class="c0">
      <span class="c6"/>
    </p>
    <p class="c4">
      <span class="c6">Open source has the potential to be more stable and secure.</span>
    </p>
    <p class="c4">
      <span>Theoretically</span>
      <span>, when a software project has many active contributors and a thriving community, the code should be less vulnerable to security flaws and disruptions in service. That’s because more people would ideally be reviewing the code, looking for bugs and fixing any problems that they see. By contrast, in a proprietary software environment, the only people who would see the code would be the team of people developing it. Instead of, say, 20 employees looking at the code at Oracle, a popular open source project could have 2,000 volunteers reviewing the code for vulnerabilities. (Note that this belief does not always match reality, and has created the opposite problem: people mistakenly believing that more people are reviewing open source software than actually are, when in reality nobody is taking responsibility. This will be discussed in a later section.)</span>
    </p>
    <p class="c0">
      <span/>
    </p>
    <p class="c4">
      <span>Open source software clearly has a number of benefits.</span>
      <span> How do these projects collectively fit into a broader ecosystem?</span>
    </p>
  </body>
</html>
