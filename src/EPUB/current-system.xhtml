<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <title>
      Roads and Bridges
    </title>
    <meta charset="UTF-8" />
    <link rel="stylesheet" href="style.css" />
  </head>
  <body>
    <h1>
      How The Current System Works
    </h1>
    <section id="digital-infrastructure">
      <h2>
        What is digital infrastructure, and how does it get built?
      </h2>
      <p class="c4">
        Earlier in this report, we compared building software to constructing a building. Those public software
        components are what collectively form our digital infrastructure. To understand this concept, consider how
        physical infrastructure works.
      </p>
      <p class="c4">
        Everybody relies upon a number of physical infrastructure projects to facilitate our day-to-day lives. Turning
        our lights on, driving to work, washing dishes: we may not often think about where our water, roads or
        electricity come from, but we have physical infrastructure to thank. Private and public partners work together
        to build and maintain our transportation, sewage, water, electric, and communication systems.
      </p>
      <p class="c4">
        Similarly, although we do not often see or think about the apps and software we use on a daily basis, all of
        them rely upon free and public code to function. Together, in an increasingly digital society, these open
        source projects make up our digital infrastructure.
      </p>
      <p class="c4">
        However, there are several major differences between physical and digital infrastructure, which affect how the
        latter is built and sustained. In particular, there are differences in <em>cost</em>, <em>maintenance</em>, and
        <em>governance</em>.
      </p>
      <h3>
        Digital infrastructure is faster and cheaper to build.
      </h3>
      <p class="c4">
        Building p hysical infrastructure is notoriously expensive. These projects are physically large in scale and
        can take months or years to complete.
      </p>
      <p class="c4">
        The United States federal government spent $96 billion on infrastructure projects in 2014, and state and local
        governments spent a combined $320 billion in the same year. Slightly less than half (43 percent) of that spend
        ing went towards new construction; the remainder was spent on operations and upkeep of existing infrastructure.
        <sup><a href="appendix.xhtml#ftnt34" id="ftnt_ref34">[34]</a></sup>
      </p>
      <p class="c4">
        Proposing and funding new physical infrastructure projects can be an extended political process. Transportation
        funding has been a contentious topic in the United States for the past decade, where the federal government
        faces a $16 billion shortfall for transportation funding. <sup><a href="appendix.xhtml#ftnt35" id=
        "ftnt_ref35">[35]</a></sup> U.S. Congress recently passed the first multi-year transportation bill in a decade,
        setting aside $305B for highways, after years of political obstacles that prevented funding infrastructure from
        being funded more than two years at a time. <sup><a href="appendix.xhtml#ftnt36" id="ftnt_ref36">[36]</a></sup>
      </p>
      <p class="c4">
        Even after a new infrastructure project has been earmarked and funded, it can take years to complete, fraught
        with uncertainties and unforeseen obstacles. The Central Artery/Tunnel project in Boston, Massachusetts, also
        known as the Big Dig, took nine years from planning to initial construction. Its projected cost was $2.8
        billion, with a scheduled completion date for 1998. In reality, the project ended up costing $14.6 billion and
        was not completed until 2007, making it the most expensive highway project in the United States. <sup><a href=
        "appendix.xhtml#ftnt37" id="ftnt_ref37">[37]</a></sup>
      </p>
      <p class="c4">
        By contrast, digital infrastructure does not have any of the costs associated with building physical
        infrastructure, such as zoning a location or purchasing materials. This makes it easy for anyone to propose a
        new idea and get started in very little time.
      </p>
      <p class="c4">
        MySQL, the second most popular database in the world <sup><a href="appendix.xhtml#ftnt38" id=
        "ftnt_ref38">[38]</a></sup> and part of a critical collection of tools that helped launch the first tech boom,
        was published by its authors, Michael Widenius and David Axmark, in May 1995. It took less than two years to
        develop. <sup><a href="appendix.xhtml#ftnt39" id="ftnt_ref39">[39]</a></sup>
      </p>
      <p class="c4">
        Ruby, a programming language, took less than three years from its initial conception in February 1993 to public
        release in December 1995. Its author, computer scientist Yukihiro Matsumoto, decided to create the language
        after a conversation with his colleagues. <sup><a href="appendix.xhtml#ftnt40" id="ftnt_ref40">[40]</a></sup>
      </p>
      <h3>
        Digital infrastructure changes frequently.
      </h3>
      <p class="c4">
        Because digital infrastructure is so cheap to build, the barriers to entry are lower, and software tools change
        more frequently.
      </p>
      <p class="c4">
        Physical infrastructure is built to last, which is partially why these projects take so long to plan, fund ,
        and build. The London Underground, London’s public rapid transit system, was built in 1863; the underground
        tunnels dug for the subway system are still in use today. <sup><a href="appendix.xhtml#ftnt41" id=
        "ftnt_ref41">[41]</a></sup> The Brooklyn Bridge, which connects the boroughs of Brooklyn and Manhattan in New
        York City, was completed in 1883 and did not undergo any major renovations until 2010, over one hundred years
        later.
      </p>
      <p class="c4">
        Digital infrastructure not only requires frequent maintenance and upkeep to be compatible with other software
        components, but its usage and adoption changes frequently as well. A bridge built in the middle of New York
        City will have fairly consistent and guaranteed usage, commensurate with the rise or decline of the city’s
        population. But a programming language or framework could be extremely popular for several years, then fall out
        of favor when something faster, more efficient, or simply trendier comes along.
      </p>
      <p class="c4">
        For example, the graph below shows activity by source code developers using several different programming
        languages. The language C, one of the most fundamental and widely used languages, has dropped in market share
        as newer languages have entered the market. Python and JavaScript, two currently popular languages, are seeing
        a moderate rise over time. And Go, which was developed in 2007, has seen more activity in recent years.
        <sup><a href="appendix.xhtml#ftnt42" id="ftnt_ref42">[42]</a></sup>
      </p>
      <p class="c4 c23">
        <span style=
        "overflow: hidden; display: inline-block; margin: 0.00px 0.00px; border: 0.00px solid #000000; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px); width: 528.00px; height: 252.00px;">
        <img alt="" src="images/image01.png" style=
        "width: 528.00px; height: 252.00px; margin-left: 0.00px; margin-top: 0.00px; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px);"
        title="" /></span>
      </p>
      <p class="c4">
        Tim Hwang, who runs the Bay Area Infrastructure Observatory, which organizes group visits to physical
        infrastructure sites, remarked on the difference in a 2015 interview with <cite>California Sunday
        Magazine</cite>:
      </p>
      <blockquote>
        <p>
          A lot of [our] members work in tech, either on the web or on software. As a result, they work on things that
          don’t last very long. Their approach is, ‘We just hacked it, and we pushed it out live,’ or ‘We just released
          it, and we can work out bugs later.’ A lot of infrastructure is built for 100 years. You can’t have bugs. If
          you do, the building will fall down. You can’t iterate it. It’s a practice that exists outside of the
          members’ day-to-day experience.<sup><a href="appendix.xhtml#ftnt43" id="ftnt_ref43">[43]</a></sup>
        </p>
      </blockquote>
      <p class="c4">
        Because digital infrastructure changes so frequently, however, older projects have a harder time finding
        contributors, because many developers prefer to work on new and exciting projects. This phenomenon has been
        referred to as “magpie developer” syndrome, where developers are attracted to “new and shiny” things, instead
        of the technology that works best for them and their users. <sup><a href="appendix.xhtml#ftnt44" id=
        "ftnt_ref44">[44]</a></sup>
      </p>
      <h3>
        Digital infrastructure does not have a central organization to determine what gets built or used.
      </h3>
      <p class="c4">
        Finally, perhaps the most striking difference between digital and physical infrastructure, and one of the
        biggest challenges to its sustainability, is that there is no organizing body to determine what gets built or
        used in digital infrastructure.
      </p>
      <p class="c4">
        Transportation, sewage and water projects are generally owned and managed by the government, whether federal,
        state or local. Communication and electric projects tend to be managed by private companies. In both
        situations, infrastructure projects are funded by a mix of private and public actors, either from the federal
        budget, private company financing, or metered user fees.
      </p>
      <p class="c4">
        In a stable, developed country, we rarely think about whether or how a road gets built or a building has
        electricity. Even for projects that are privately owned or funded, the federal government has a vested interest
        in guaranteeing that physical infrastructure gets built and maintained.
      </p>
      <p class="c4">
        Digital infrastructure projects, on the other hand, are conceived of and built from the bottom up. It is akin
        to a group of citizens getting together and deciding they want to build a bridge or create their own sewage
        system. There is no authoritative body whose formal permission is required to create new digital
        infrastructure.
      </p>
      <p class="c4">
        The Internet itself does have two major governing bodies that help set standards: the Internet Engineering Task
        Force and World Wide Web Consortium.
      </p>
      <p class="c4">
        The Internet Engineering Task Force (IETF) helps develop and set voluntary standards for how information gets
        passed around the Internet. For example, they are the reason why URLs start with “HTTP”. They are also the
        reason why we have IP addresses — unique identifiers assigned to your computer when it is connected to a
        network. Originally a working group within the United States government in 1986, the IETF became an
        independent, international organization in 1993. <sup><a href="appendix.xhtml#ftnt45" id=
        "ftnt_ref45">[45]</a></sup> The IETF itself is run by volunteers, and there are no membership requirements:
        anyone from the public may join simply by declaring him- or herself a member.
      </p>
      <p class="c4">
        The World Wide Web Consortium (W3C) helps set standards for the World Wide Web. It was founded by Tim
        Berners-Lee in 1994. The W3C tends to focus more exclusively on web pages and documents ( they are, for
        example, the reason why web pages use HTML for basic formatting). They maintain the standards around the markup
        language HTML and stylesheet formatting language CSS, two basic components of any web page. The W3C’s
        membership is slightly more formalized, requiring an application and fee, and its members rang e from
        businesses to universities to individuals.
      </p>
      <p class="c4">
        The IETF and W3C help manage standards around the most fundamental pieces of the Internet, but the next layer
        up —choices about which languages are used to build software, which frameworks to build them with, or which
        libraries to include — are entirely self-managed in the public domain. (Certainly, many proprietary software
        projects, particularly those with heavy regulation, such as aeronautics or health care, may have requirements
        on which tools are used. They may even build proprietary tools for their own use.)
      </p>
      <p class="c4">
        With physical infrastructure, if the government builds a new bridge between San Francisco and Oakland, that
        bridge will certainly be used. Similarly, when the W3C wants to set a new standard, such as a new version of
        HTML, it is formally published and announced. For example, in 2014, the W3C announced HTML5, the first major
        revision of HTML since 1997, which had been in development for seven years.
      </p>
      <p class="c4">
        By contrast, when a computer scientist wants to create a new programming language, he or she is free to publish
        it and it may or may not be adopted. The bar for adoption is even lower for frameworks or libraries: because
        they are easier to build, and easier for a user to learn and implement, these tools are iterated more
        frequently.
      </p>
      <p class="c4">
        More importantly, nobody is forcing or even strongly encouraging anyone to use these projects. Some projects
        remain more academic than practical; others are ignored completely. It is difficult to predict what gets used
        until others are actually using it.
      </p>
      <p class="c4">
        Developers like to point to <em>usefulness</em> as an indicator of whether a new project gets adopted or not.
        New projects should make an improvement to an existing project, or solve a chronic problem, in order to be
        deemed useful and worthy of adoption. When developers are asked why their project got so popular, many of them
        will shrug and simply say, <q class="normal">It was the best thing out there.</q>
      </p>
      <p class="c4">
        Not unlike technology startups, new digital infrastructure projects rely upon <em>network effects</em> for
        adoption. Getting a core group of developers excited, or a software company using the project, helps spread the
        word. A catchy name, branding, or website can add to the project’s novelty factor. A developer’s reputation
        within their respective community also helps determine whether a new project gets noticed.
      </p>
      <p class="c4">
        However, in the end, a new digital infrastructure project can come from just about anywhere, which means each
        project is managed and sustained in very different ways.
      </p>
    </section>
    <section id="managed-and-supported">
      <h2>
        How are digital infrastructure projects managed and supported?
      </h2>
      <p class="c4">
        We’ve established that digital infrastructure is as critical to modern society as physical infrastructure.
        Although digital infrastructure is not subject to the high costs and political obstacles of physical
        infrastructure, its decentralized nature also makes it harder to pin down. Without a central governing body,
        how do open source projects find the support they need?
      </p>
      <p class="c4">
        In short, the answer is different for every project. However, there are several places where projects might
        originate: within a company, as a new business, or from an individual or community of developers.
      </p>
      <h3>
        Within a company
      </h3>
      <p class="c4">
        Sometimes, the project starts within a company. Here are a few examples that demonstrate the different ways in
        which an open source project might be supported by a company’s resources:
      </p>
      <ul class="callout">
        <li>
          <p>
            <strong>Go, the new programming language previously mentioned,</strong> was developed at Google in 2007 by
            engineers Robert Griesemer, Rob Pike, and Ken Thompson, who created Go as an experiment. Go is open source
            and accepts contributions from the broader community. However, its core maintainers are employed full-time
            by Google to work on the language.<sup><a href="appendix.xhtml#ftnt46" id="ftnt_ref46">[46]</a></sup>
          </p>
        </li>
        <li>
          <p>
            <strong>React is a new JavaScript library that is growing in popularity.</strong> React was created by
            Jordan Walke, a software engineer at Facebook, for internal use on Facebook’s news feed. An employee at
            Instagram (which is owned by Facebook) wanted to use React, too, and eventually React was open sourced, two
            years after its initial development.<sup><a href="appendix.xhtml#ftnt47" id="ftnt_ref47">[47]</a></sup>
            Facebook dedicated a team of engineers to help maintain the project, but React also accepts contributions
            from the public developer community.<sup><a href="appendix.xhtml#ftnt48" id="ftnt_ref48">[48]</a></sup>
          </p>
        </li>
        <li>
          <p>
            <strong>Swift, the programming language used for iOS, OS X, and other Apple projects,</strong> is an
            example of a project that was only recently open sourced. Swift was developed internally by Apple for four
            years and released as a proprietary language in 2014. Developers could use Swift to write software for
            Apple devices, but not contribute to the language’s core development. In 2015, Swift was open sourced under
            the Apache License 2.0.<sup><a href="appendix.xhtml#ftnt49" id="ftnt_ref49">[49]</a></sup>
          </p>
        </li>
      </ul>
      <p class="c4">
        The incentives for a company to maintain an open source project are numerous. Opening up a project to the
        public can mean less work for the company, which is essentially crowdsourcing improvements. It builds goodwill
        and awareness among developers, who might then be incentivized to use other company resources to build things.
        Having an active community of developers creates a recruiting pipeline for talent. And sometimes, open sourcing
        a project helps a company strengthen their user base and brand, or even drown out competition. The more market
        share a company can capture, even through tools it gives away, the more influential it becomes. This is not
        dissimilar to the “loss leader” concept of business.
      </p>
      <p class="c4">
        Even if a project is created internally, if it is open sourced, that project is free to use or modify according
        to the terms of an open source license, and is not considered company intellectual property in the traditional
        sense. Many company projects use standard open source licenses that are considered acceptable by the broader
        developer community, such as Apache License 2.0 or BSD. However, in some cases, companies add their own
        clauses. React, for example, has an additional clause that could potentially cause patent claim conflicts with
        React users. <sup><a href="appendix.xhtml#ftnt50" id="ftnt_ref50">[50]</a></sup> As a result, some companies
        and individuals are reluctant to use React, and the decision is frequently portrayed as in conflict with open
        source principles.
      </p>
      <h3>
        As a new business
      </h3>
      <p class="c4">
        S ome infrastructure projects take a traditional startup path, including venture funding. A couple of examples
        are as follows:
      </p>
      <ul class="callout">
        <li>
          <p>
            <strong>Docker, perhaps the best-known contemporary example, helps software applications run inside
            containers.</strong> (Containers provide a clean, tidy environment for software applications that make them
            easier to run anywhere). Docker started as an internal project within dotCloud, a platform-as-a-service
            company, but became so popular that the founders decided to make Docker the main focus of the company. The
            Docker project was open sourced in 2013. Docker has raised $180M with an estimated valuation of over
            $1B.<sup><a href="appendix.xhtml#ftnt51" id="ftnt_ref51">[51]</a></sup> Their business model is based on
            support, private plans, and services. Docker’s 2014 revenue was less than $10 million.<sup><a href=
            "appendix.xhtml#ftnt52" id="ftnt_ref52">[52]</a></sup>
          </p>
        </li>
        <li>
          <p>
            <strong>Npm is a package manager to help Node.js developers share and manage their projects,</strong>
            released in 2010. Npm raised nearly $11M in funding since 2014 from True Ventures and Bessemer Ventures,
            among others. Their business model focuses on paid features that support privacy and security.
          </p>
        </li>
        <li>
          <p>
            <strong>Meteor is a JavaScript framework that was first released in 2012.</strong> It was incubated by Y
            Combinator, a prestigious startup accelerator that also incubated companies like AirBnB and Dropbox. Meteor
            has received over $30M in funding to date from firms including Andreessen Horowitz and Matrix
            Partners.<sup><a href="appendix.xhtml#ftnt53" id="ftnt_ref53">[53]</a></sup> Meteor’s business model
            focuses on an enterprise platform called Galaxy, released in October 2015, for operating and managing
            Meteor applications.<sup><a href="appendix.xhtml#ftnt54" id="ftnt_ref54">[54]</a></sup>
          </p>
        </li>
      </ul>
      <p class="c4">
        The venture funding approach is relatively new, and growing rapidly. Lightspeed Venture Partners found that
        from 2010-2015, venture firms invested over $4B in open source companies, a tenfold increase over the five
        previous years.<sup><a href="appendix.xhtml#ftnt55" id="ftnt_ref55">[55]</a></sup>
      </p>
      <p class="c4">
        Using venture capital to support open source projects has been met with skepticism from developers (and even
        some venture capitalists themselves), due to lack of clear business models and questionable revenue to justify
        valuations. Steve Klabnik, a maintainer for the language Rust, explains venture capital’s sudden interest in
        funding open source:
      </p>
      <blockquote>
        <p>
          I’m a VC. I need a large number of companies to exist to make my money….I need costs to be low and profits to
          be high. I need a healthy open source ecosystem to make this happen. So what do I do?...VCs are realizing
          this story, and are starting to invest in infrastructure. [...]
        </p>
        <p>
          In many ways, the open source stuff is a loss leader, so that you get hooked...and then use it for
          everything, even your closed source code. This is a great business strategy, but it also places GitHub at the
          center of this new universe. So for similar reasons, a16z needs GitHub to be awesome to bootstrap every open
          source ecosystem that will exist into the future….And a16z has the money to “throw away” on something they
          won’t get a direct return out of, because they’re smart enough to invest some of their fund in ecosystem
          development.<sup><a href="appendix.xhtml#ftnt56" id="ftnt_ref56">[56]</a></sup>
        </p>
      </blockquote>
      <p class="c4">
        GitHub, created in 2008, is a platform for code, available publicly or privately in an easy-to-read
        environment. It hosts many popular open source projects and, most importantly, has become the cultural
        epicenter for open source’s explosive growth (to be discussed later in this report).
      </p>
      <p class="c4">
        GitHub did not take any venture capital until 2012, four years after its founding. Before then, GitHub was a
        profitable company. Since 2012, GitHub has taken $350M in total venture capital funding. <sup><a href=
        "appendix.xhtml#ftnt57" id="ftnt_ref57">[57]</a></sup> Andreessen Horowitz (or “a16z”), the $4B venture capital
        firm who provided most of the capital in their first $100M round, stated it was the largest investment they had
        ever made at the time. <sup><a href="appendix.xhtml#ftnt58" id="ftnt_ref58">[58]</a></sup>
      </p>
      <p class="c4">
        Steve Klabnik’s thesis, in other words, is that venture capital firms who invest in open source infrastructure
        promote these platforms as a “loss leader,” even when there is no direct business model or profitability to be
        had, because it grows the entire ecosystem. The more resources GitHub has, the more open source thrives. The
        more open source thrives, the more startups thrive. If nothing else, venture capital’s interest in open source,
        especially given the lack of clear financial return, validates the critical role open source plays in the
        broader startup ecosystem.
      </p>
      <p class="c4">
        (As an aside, it is important to mention that GitHub, the platform itself, is not an open source project, and
        therefore is not an example of venture capital directly funding open source. GitHub is a closed source platform
        that hosts open source projects. This is a controversial topic for some open source contributors.)
      </p>
      <h3>
        By individuals or a group of individuals
      </h3>
      <p class="c4">
        Finally, many digital infrastructure projects are developed and maintained entirely by independent developers,
        or a community of developers. A few examples are as follows:
      </p>
      <ul class="callout">
        <li>
          <p>
            <strong>Python, a programming language, was developed and published by computer scientist Guido van Rossum
            in 1991.</strong> Van Rossum claimed he <q>was looking for a ‘hobby’ programming project that would keep me
            occupied during the week around Christmas.</q><sup><a href="appendix.xhtml#ftnt59" id=
            "ftnt_ref59">[59]</a></sup> The project took off, and Python is now considered to be one of the most
            popular programming languages today.<sup><a href="appendix.xhtml#ftnt60" id="ftnt_ref60">[60]</a></sup> Van
            Rossum remains the principal author of Python (also known as a benevolent dictator for life, or BDFL, among
            developers) and is currently employed by Dropbox, whose software relies heavily on Python.<sup><a href=
            "appendix.xhtml#ftnt61" id="ftnt_ref61">[61]</a></sup> Python is partially managed by the Python Software
            Foundation, created in 2001, which has a number of corporate sponsors, including Intel, HP, and Google.
          </p>
        </li>
        <li>
          <p>
            <strong>RubyGems is a package manager that helps distribute programs and libraries</strong> associated with
            the Ruby programming language. It is a critical piece of infrastructure for any Ruby developer. Examples of
            websites that use Ruby are Hulu, AirBnB and Bloomberg.<sup><a href="appendix.xhtml#ftnt62" id=
            "ftnt_ref62">[62]</a></sup> RubyGems was created in 2003 and is managed by a community of developers. Some
            development work is supported by Ruby Together, a foundation that accepts donations from companies and
            individuals.
          </p>
        </li>
        <li>
          <p>
            <strong>Twisted, a Python library, was authored by a developer named Glyph Lefkowitz in 2002.</strong>
            Since then, it has achieved widespread usage among individuals and organizations, including Lucasfilm and
            NASA.<sup><a href="appendix.xhtml#ftnt63" id="ftnt_ref63">[63]</a></sup> Twisted continues to be run by a
            group of volunteers. It is supported by corporate and individual donations; Lefkowitz remains the lead
            architect and offers consulting services for income.<sup><a href="appendix.xhtml#ftnt64" id=
            "ftnt_ref64">[64]</a></sup>
          </p>
        </li>
      </ul>
      <p class="c4">
        As these examples demonstrate, open source projects can come from just about anywhere. This is, generally,
        considered to be a good thing. It means that <em>useful</em> projects are more likely to succeed, avoiding both
        the vacuous hype associated with startups, and the bureaucracy associated with government. Digital
        infrastructure’s decentralized nature also reinforces the open and democratic principles of the Internet, where
        anybody could theoretically create the next big project, whether a company or individual.
      </p>
      <p class="c4">
        On the other hand, many useful projects will come from independent developers who suddenly find themselves at
        the helm of a successful project, facing critical decisions about its future. A 2015 study by the Federal
        University of Minas Gerais in Brazil looked at 133 of the most actively used projects hosted on GitHub, across
        programming languages, and found that 64%, or nearly two-thirds, relied upon just one or two developers to
        survive. <sup><a href="appendix.xhtml#ftnt65" id="ftnt_ref65">[65]</a></sup> Although there may be a long tail
        of casual or infrequent contributors, for many projects, the major responsibilities of project management fall
        on just a few people .
      </p>
      <p class="c4">
        Coordinating international communities of opinionated contributors and managing the expectations of Fortune 500
        companies who use your project are challenging tasks for anyone. It is truly impressive how much has already
        been accomplished in this manner. These tasks are especially difficult when developers lack clear role models
        or institutional support for this work. In interviews for this report, many developers privately lamented that
        they have no idea who to ask for help and would “rather just code.”
      </p>
      <p class="c4">
        Why do they keep doing it? The remainder of this paper will focus on how and why open source contributors
        maintain projects of massive scale and impact, and why it matters to all of us.
      </p>
    </section>
    <section id="why-contribute">
      <h2>
        Why do people keep contributing to these projects, when they’re not getting paid for it?
      </h2>
      <p class="c4">
        Many digital infrastructure projects are maintained by individual contributors or a community of contributors.
        In most cases, these contributors are not being paid directly to work on the project. Instead, they contribute
        for reasons that are unique to open source communities, including building reputation and a public service
        mindset. This section will explore some of those motivations in greater detail.
      </p>
      <h3>
        Contributing to open source builds one’s reputation.
      </h3>
      <p class="c4">
        Building one’s reputation is perhaps the most practical reason why someone would want to contribute to an open
        source project. For developers, technical writers, or others, these projects help them prove themselves in
        public, giving them a chance to be part of something big and useful.
      </p>
      <p class="c4">
        Google runs a program called Google Summer of Code, which provides a summer stipend to student developers to
        contribute to popular open source projects. The program works well because the developers are students, new to
        the field of computer science, and eager to show off their skills.
      </p>
      <p class="c4">
        Developers, in particular, leverage open source contributions to build a portfolio of their work. In addition,
        by providing input on popular projects with active communities, a developer has a chance to build his or her
        reputation by making him or herself “known.” GitHub, the website previously mentioned, is a popular platform
        for collaborating on code. When a developer makes a contribution to a public software project, those
        contributions appear in his or her profile. A developer’s GitHub profile can serve as a portfolio for software
        companies, but only contributions to public (i.e., open source) projects are visible to anyone.
      </p>
      <p class="c4">
        However, reputation-based motivations also come with risks, especially among junior developers. A developer
        early in his or her career may contribute to an open source project for the sole purpose of getting hired, then
        stop contributing once this goal has been achieved. In addition, developers who are solely interested in
        building their portfolio may make lower quality contributions to the project that do not get accepted or even
        slow down the development process. Finally, if the purpose of making a public contribution is to build one’s
        reputation, a developer will be motivated to only contribute to popular or attractive projects (an extension of
        the “magpie developer” phenomenon mentioned earlier), which means that older projects struggle to find new
        contributors.
      </p>
      <h3>
        The project became unexpectedly popular, and the maintainer feels obligated to support it.
      </h3>
      <p class="c4">
        A popular open source project can create dependencies for other companies, individuals or organizations. In
        other words, the code is being used in live software, written and deployed by other people, that could serve
        any number of purposes, whether online shopping or health care. This complex set of dependencies (many of which
        are not visible even to the project author, since they do not have clear user data) can make a maintainer feel
        ethically obligated to continue supporting it.
      </p>
      <p class="c4">
        Arash Payan, the developer of Appirater mentioned in the beginning of this paper, released his project in 2009.
        Of his decision to continue maintaining the project, Payan says:
      </p>
      <blockquote>
        <p>
          It's not terribly exciting stuff, but there are so many people out there that use (depend, even?) on the
          project for their apps, that I feel obligated to be a good steward of it. Personally, I've moved on from iOS,
          so maintaining an iOS library isn't exactly my first choice for a side project.<sup><a href=
          "appendix.xhtml#ftnt66" id="ftnt_ref66">[66]</a></sup>
        </p>
      </blockquote>
      <p class="c4">
        Payan estimates the project only takes roughly 1-2 hours per month to keep up-to-date, so he doesn’t mind the
        work.
      </p>
      <p class="c4">
        Some projects become unexpectedly popular but take more time to support. Andrey Petrov is an independent
        developer who wrote a Python library called urllib3. He released it in 2008 as a significant improvement to the
        existing standard library, and it became popular among Python developers. Today, every Python user depends on
        it. <sup><a href="appendix.xhtml#ftnt67" id="ftnt_ref67">[67]</a></sup>
      </p>
      <p class="c4">
        Andrey made the project open source in hopes that other people would help support its continued development and
        upkeep. Andrey is a freelance developer — although he enjoys maintaining urllib3, he can only justify doing so
        in his free time, since he is not paid for his work. Cory Benfield, who is employed by Hewlett Packard
        Enterprise to help maintain critical Python libraries (which HPE uses and depends on), now works on urllib3 as
        part of his job. Cory’s arrangement has reduced some of the burden.
      </p>
      <h3>
        The project is a labor of love.
      </h3>
      <p class="c4">
        Eric Holscher is a creator of Read the Docs, which hosts software documentation. Documentation is the
        equivalent of an instruction manual. Just as one might need an instruction manual to figure out how to put a
        piece of furniture together, developers need documentation to figure out how to implement a project. Without
        proper documentation, it would be difficult for a developer to know how to get started.
      </p>
      <p class="c4">
        Read the Docs provides documentation for 18,000 software projects, including enterprise customers, and serves
        over 15 million page views per month. <sup><a href="appendix.xhtml#ftnt68" id="ftnt_ref68">[68]</a></sup>
        Although they make some money from large business clients, Read the Docs is still mostly funded by donations
        from its users. A company called Rackspace sponsors their server costs.
      </p>
      <p class="c4">
        Eric and his cofounder, Anthony Johnson, maintain the project, and do not see steady income from it, despite
        working on the project full-time. A $48,000 one-time grant from the Mozilla Foundation in December 2015 will
        help cover their work for a short time. <sup><a href="appendix.xhtml#ftnt69" id="ftnt_ref69">[69]</a></sup>
        They are currently experimenting with an advertising model ( that does not involve tracking their users ) to
        reach sustainability. <sup><a href="appendix.xhtml#ftnt70" id="ftnt_ref70">[70]</a></sup>
      </p>
      <p class="c4">
        Eric notes that the difficulties lie not just in new development work, but non-coding functions like customer
        support, for which one of the maintainers must be on call every weekend in case of an emergency. When Eric
        explained why he continues to support the project, he called it a “labor of love”:
      </p>
      <blockquote>
        <p>
          Either humans are irrational or they don’t just follow money. Clearly there’s another motivation for me here.
          It’s a labor of love. I could close this project tomorrow and be done with it if I wanted to, but I’ve been
          doing it for 5 years and I don’t want to see that happen.<sup><a href="appendix.xhtml#ftnt71" id=
          "ftnt_ref71">[71]</a></sup>
        </p>
      </blockquote>
      <p class="c4">
        Eric is motivated to work on Read the Docs because he sees the tangible value it creates for others. For many
        project maintainers, impact is a primary motivator, because they see how their direct efforts positively affect
        other people’s lives. In this sense, open source work shares many similarities to the nonprofit sector. Much
        like the nonprofit sector, however, this “labor of love” mentality can make it harder for open source
        communities to discuss the elephant in the room: how to sustain projects that require more resources and
        attention than current contributors can offer.
      </p>
    </section>
  </body>
</html>
