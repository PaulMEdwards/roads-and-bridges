<?xml version="1.0" encoding="UTF-8"?>
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <title>Roads and Bridges</title>
    <meta charset="UTF-8"/>
    <link rel="stylesheet" href="style.css"/>
  </head>
  <body>
    <p class="c4">
      <span class="c1 c11">Developing</span>
      <span class="c1 c11"> effective support strategies</span>
    </p>
    <p class="c4">
      Although there is growing interest in efforts to support digital infrastructure, current initiatives are still new, ad hoc or provide only partial support (such as fiscal sponsorship).
    </p>
    <p class="c4">
      Developing effective support strategies requires a nuanced understanding of the open source culture that characterizes so much of our digital infrastructure, as well as recognizing that much has changed in the past five years, including the very definition of “open source” itself.
    </p>
    <p class="c4">
      Money alone will not fix a struggling infrastructure project, because open source thrives on human rather than financial resources. There are many ways to grow human resources, such as distributing the workload among more contributors or encouraging companies to make open source part of their employees’ work. An effective support strategy must include multiple ways to generate time and resources besides directly financing development. It must start from the principle that the open source approach is not inherently flawed, but rather under-resourced.
    </p>
    <p class="c4">
      Supporting infrastructure requires embracing the concept of stewardship rather than control. As we’ve seen, digital infrastructure doesn’t look like physical infrastructure. It is distributed across multiple actors and organizations, with projects of many shapes and sizes, and it is hard to predict which projects will be successful or who will contribute to them in the long term.
    </p>
    <p class="c4">
      With this in mind, here are some suggested design principles for effective support strategies:
    </p>
    <ol class="c14 lst-kix_cy6f3llx93o0-0 start" start="1">
      <li class="c3 c9">
        <span class="c7">Embrace, rather than fight against, decentralization.</span>
         Open source is meant to be distributed; that’s part of what makes it so impactful. Leverage the community-driven approach as a strength rather than centralizing authority.
      </li>
      <li class="c3 c9">
        <span class="c7">Work closely with existing software communities.</span>
         Software communities are active, tight-knit, and vocal. Treat them as an asset rather than making decisions behind closed doors. Prominent community voices are canaries in the coal mine when something needs attending to.
      </li>
      <li class="c3 c9">
        <span class="c7">Consider a holistic approach to project support. </span>
        Projects need more than just code or money, and sometimes, they need neither. Long-term support is more about creating time than it is about money. Code reviews, technical documentation, code testing, community advocacy, and evangelism are all important resources.
      </li>
      <li class="c3 c9">
        <span class="c7">Help project maintainers plan ahead. </span>
        Current efforts to support digital infrastructure tend to be reactive and ad hoc. In addition to existing projects, there may be new projects that need to be supported and built. For existing projects, maintainers will benefit greatly from being able to plan for the next three to five years, not just six months to a year.
      </li>
      <li class="c3 c9">
        <span class="c7">Recognize opportunities, not just risks. </span>
        Modern open source support is not just about preventing worst-case scenarios (for example, security breaches), but rather empowering more people to build more things. This concept is a hallmark of today’s open source culture and also helps build a legacy of support. Consider how you can include more people from different backgrounds, skill sets, and abilities in your strategy, rather than limiting work to benefitting existing participants.
      </li>
    </ol>
    <p class="c4">
      David Heinemeier Hansson, the creator of Ruby on Rails, compared open source to a coral reef: 
    </p>
    <p class="c3">
      <span class="c6">“It's more sensitive than you think, and it's [hard] to underestimate the beauty that's unwittingly at stake. Please tread with care.”</span>
      <sup class="c6">
        <a href="appendix.xhtml#ftnt192" id="ftnt_ref192">[192]</a>
      </sup>
    </p>
    <p class="c4">
      <span class="c1 c11">Priming the landscape</span>
    </p>
    <p class="c4">
      It is too early to say what long-term institutional support should look like from a programmatic perspective, but there are several critical areas of work that would
       help us get there.
    </p>
    <p class="c4">
      The following suggestions fall into three areas:
    </p>
    <ul class="c14 lst-kix_ypqkuspwilwt-0 start">
      <li class="c3 c9">
        <span class="c7">Treating digital infrastructure as a necessary public good </span>
        and elevating its importance to key stakeholders across sectors
      </li>
      <li class="c3 c9">
        <span class="c7">Working with projects</span>
         to improve standards, security, and workflows
      </li>
      <li class="c3 c9">
        <span class="c7">Expanding the pool of contributors</span>
         so that more people, and more types of people, can build and sustain public software together
      </li>
    </ul>
    <p class="c4">
      <span class="c6">Building awareness and educating key stakeholders</span>
    </p>
    <p class="c4">
      As discussed in this report, many key stakeholders—including those from startups, government, and venture capital—mistakenly believe that public software “just works” and does not require additional support. In order to adequately support our digital infrastructure ecosystem, these populations must first be made aware of the problem. Digital infrastructure needs advocates, unhampered by political or commercial constraints, who can understand and communicate the needs of digital infrastructure.
    </p>
    <p class="c4">
      Treating digital infrastructure as a necessary public good could also help direct investment into building better systems from scratch. For example, in the United States, the interstate highway system and the public library system were intentionally designed as public resources. Both had champions (President Dwight Eisenhower and philanthropist Andrew Carnegie, respectively), who built a case for the social and financial benefit that would result from these projects. A national highway system not only connected us as people, making it easier to get from place to place, but brought financial prosperity to all corners of the country, due to commercial use of highways to transport goods. Andrew Carnegie’s free public libraries used an “open stack” instead of a “closed stack” system, enabling people to browse and find information themselves, instead of requesting it from a librarian. This practice helped democratize information and empower people to educate themselves.
    </p>
    <p class="c4">
      Better education and awareness could also extend to governments, some of which have made digital infrastructure legally difficult to support, and who may not be as familiar with the cultural norms and history of open source. In the United States, the IRS has narrow definitions of what it considers to be charitable work, and because open source is not well understood, its positive impact on society goes unnoticed. This makes it difficult to institutionalize bigger projects under a foundation or trade association
      .
    </p>
    <p class="c4">
      <span class="c6">Measuring the usage and impact of digital infrastructure</span>
    </p>
    <p class="c4">
      The impact of digital infrastructure is still very difficult to measure. Usage metrics are either highly inaccurate or simply unavailable. This is not an easy problem to solve for. But without data about which tools are used, and how much we rely upon them, it is hard to paint a clear picture of what is underfunded.
    </p>
    <p class="c4">
      With better metrics, we could describe the economic impact of digital infrastructure, identify critical projects that are lacking support, and understand dependencies between projects and people. Right now, it is impossible to say who is using an open source project unless that person or company discloses their usage. Our information about which projects need better support is mostly anecdotal.
    </p>
    <p class="c4">
      Better metrics could also help us identify “keystone contributors” to open source. In conservation biology, a “keystone species” is a species of animal with a disproportionately large effect on its environment relative to its abundance.
      <sup>
        <a href="appendix.xhtml#ftnt193" id="ftnt_ref193">[193]</a>
      </sup>
       Similarly, a “keystone contributor” might be a developer who contributes to multiple critical projects, is singlehandedly responsible for a critical project, or is generally perceived to be influential and trustworthy. Keystone contributors are critical advocates; empowering them with the resources they need could help improve the system as a whole. Understanding the relationship between open source communities and keystone contributors could help quickly identify areas that require further support.
    </p>
    <p class="c4">
      There is also little data about the contributors themselves: who contributes to open source, what conditions allow them to do so, and what types of contributions are made. Women, non-English speakers, and new contributors to open source are examples of demographics that should be tracked over time, especially to measure the impact of support programs.
    </p>
    <p class="c4">
      The only statistics available about GitHub repositories are the number of people who have starred (similar to a “like” or “favorite”), watched (meaning they receive updates about the project) or forked a project. These numbers help provide some metrics for relative popularity, but can also be misleading. Plenty of people could star a project, for example, because it is conceptually interesting, but not actually use it in their code.
    </p>
    <p class="c4">
      Some package managers like npm (which is used for Node.js) track downloads. Debian Popularity Contest tracks downloads of packages related to the free operating system Debian. Each package manager is limited to a particular ecosystem, however, and no one package manager can paint a picture of the system at large. Many projects are not part of a package manager and go untracked. Libraries.io, a website created by Andrew Nesbitt, is one effort to aggregate data open source projects and provide more data around their usage; it tracks over 1.3M open source libraries across 32 package managers.
      <sup>
        <a href="appendix.xhtml#ftnt194" id="ftnt_ref194">[194]</a>
      </sup>
    </p>
    <p class="c4">
      <span class="c6">Working with projects to modernize workflows</span>
    </p>
    <p class="c4">
      Many projects struggle not just due to lack of funding, but because the projects are difficult to contribute to, or suffer a bottleneck from maintainers, who meticulously review and accept pull requests from the community. This is particularly true for older projects which may have been built using developer tools, languages, or workflows that are no longer popular (for example, using an older version control system instead of Git, whose popularity is growing among developers).
    </p>
    <p class="c4">
      There is plenty of work that can be done to make projects easier to contribute to, including migrating them to newer workflows, cleaning up code, closing unattended pull requests, and setting clear policies for contribution.
    </p>
    <p class="c4">
      Some projects have experimented with making it easier to contribute. For example, developer Felix Geisend
      ö
      rfer has suggested that everybody who submits a change to code should be given commit access, in order to reduce the bottleneck of a single maintainer reviewing and approving those changes. Felix found that 
      <span class="c6">“this approach is a fantastic way to keep projects from going stale as well as turning one-man projects into small communities.”</span>
      <sup>
        <a href="appendix.xhtml#ftnt195" id="ftnt_ref195">[195]</a>
      </sup>
    </p>
    <p class="c4">
      The Node.js contribution policy, which is made available for other Node projects to adopt, emphasizes growing the number of contributors and empowering them to make their own decisions, instead of treating maintainers as the final approving authority. Their contribution policy details how to submit and accept pull requests and how to log bugs and other issues. The Node.js maintainers found that adopting better policies helped them manage their workload and grow their community into a healthier, active project.
      <sup>
        <a href="appendix.xhtml#ftnt196" id="ftnt_ref196">[196]</a>
      </sup>
    </p>
    <p class="c4">
      There is research to be done that addresses what projects should strive towards in the first place. That is, what does a “successful” project look like, in terms of financial support and governance models, as well as balancing the right mix of maintainers, contributors, and users? The answer may vary for different types or sizes of projects.
    </p>
    <p class="c4">
      <span class="c6">Encouraging standards across open source projects</span>
    </p>
    <p class="c4">
      Although GitHub is becoming a standard platform for code collaboration, many aspects of an open source project are still not standardized, including the breadth and depth of documentation, licenses, and contributing guides, as well as code style and formatting. Encouraging the adoption of project standards can make it easier for maintainers to manage contributions, as well as lowering a contributor’s barrier to participation.
    </p>
    <p class="c4">
      One example of a growing standard is a code of conduct, which is a policy detailing expectations for behavior and communication. Codes of conduct are being adopted among many project communities in recent years, including Node.js, Django, and Ruby. Although the process of adoption has been hotly debated among some communities, their proliferation suggests a rising interest in holding communities accountable for their behavior.
    </p>
    <p class="c4">
      <span class="c6">Expanding the pool of open source contributors</span>
    </p>
    <p class="c4">
      As discussed earlier in this report, software is a booming industry, with growing numbers of just new developers but other skilled talent, and there is work to be done to encourage newcomers to contribute to open source. Expanding the pool of 
      contributors 
      helps open source projects become more resilient, because more people are participating in their development. Helping more people contribute to open source also increases empathy and communication between open source “users” and the projects they depend on.
    </p>
    <p class="c4">
      Your First PR is an example of an initiative, developed by programmer Charlotte Spencer, that helps newcomers make their first contribution to open source.
      <sup>
        <a href="appendix.xhtml#ftnt197" id="ftnt_ref197">[197]</a>
      </sup>
       First Timers Only
      <sup>
        <a href="appendix.xhtml#ftnt198" id="ftnt_ref198">[198]</a>
      </sup>
       and Make a Pull Request
      <sup>
        <a href="appendix.xhtml#ftnt199" id="ftnt_ref199">[199]</a>
      </sup>
       are two other popular examples of resources that introduce newcomers to open source. Some open source projects also use tags such as “first bug” or “contributor friendly” to flag issues that are suitable for less experienced contributors to tackle. It would also be valuable to encourage contributions to open source beyond code, such as writing technical documentation, managing tasks and workflows, or creating a website for a project.
    </p>
    <p class="c4">
      In addition to increasing the percentage of technical talent that contributes to open source, there is an opportunity to draw from a wider pool of contributors. Making non-English speakers feel welcomed in open source communities, for example, can help make technology more accessible around the world. And because many recruiters use open source work as a portfolio when hiring developers, a more diverse open source community can help build a more inclusive tech talent field overall.
    </p>
    <p class="c4">
      <span class="c6">Improving relationships between projects and external stakeholders</span>
    </p>
    <p class="c4">
      Companies are an inevitable part of the open source ecosystem, and their role is only increasing in importance as more companies embrace open source software. Making it easier for companies and projects to work with one another, as well as helping companies understand the needs of project communities, can unlock companies as patrons of, and advocates for, open source.
    </p>
    <p class="c4">
      According to the annual Black Duck open source company survey, only 27% of companies have a formal policy for employee contributions to open source.
      <sup>
        <a href="appendix.xhtml#ftnt200" id="ftnt_ref200">[200]</a>
      </sup>
       Clarifying whether and how employees may contribute back to open source on company time, and encouraging them to do so, could go a long way in improving corporate support for open source projects.
    </p>
    <p class="c4">
      In 2014, a group of companies formed the TODO Group, to share best practices around corporate participation in open source. Members include Box, Facebook, Dropbox, Twitter, and Stripe.
      <sup>
        <a href="appendix.xhtml#ftnt201" id="ftnt_ref201">[201]</a>
      </sup>
       In March 2016, the TODO Group announced it would be housed by the Linux Foundation as a collaborative project.
      <sup>
        <a href="appendix.xhtml#ftnt202" id="ftnt_ref202">[202]</a>
      </sup>
    </p>
    <p class="c4">
      Companies can also provide financial support for projects, but sometimes find it difficult to figure out how to structure their sponsorship. Creating sponsorship budgets for engineering departments or employees, or creating documents to make it easy for projects to “invoice” companies, could increase financial contributions to open source.
    </p>
    <p class="c4">
      Poul-Henning Kamp, for example, works on an open source project called Varnish, used by one-tenth of the top websites on the Internet, including Facebook, Twitter, Tumblr, The New York Times, and The Guardian.
      <sup>
        <a href="appendix.xhtml#ftnt203" id="ftnt_ref203">[203]</a>
      </sup>
       To fund his work, he created the Varnish Moral License to make it easy for companies to sponsor the project. Although in practice the relationship is a sponsorship, Poul-Henning uses terminology that companies are familiar with, such as “invoices” and “licenses,” to reduce barriers to participation.
      <sup>
        <a href="appendix.xhtml#ftnt204" id="ftnt_ref204">[204]</a>
      </sup>
    </p>
    <p class="c4">
      <span class="c6">Increasing support of diverse skill sets and non-coding functions</span>
    </p>
    <p class="c4">
      In the not-too-distant past, software startups were once heavily weighted towards engineering talent. Other functions, like marketing or design, were considered secondary to code.
    </p>
    <p class="c4">
      With the rapid creation and consumerization of software today, that view no longer holds. Startups need to compete for their customers’ attention. Brand has become one of the most important differentiators.
    </p>
    <p class="c4">
      The last five years have seen the rise of the “full stack engineer”: developers who are more generalists than specialists, able to work on different layers of software complexity, and who might even have some proficiency with design or product. Software teams collaborate more closely, using agile software development approaches (where the product is built through frequent iteration between engineering, design, product, and marketing teams) rather than waterfall approaches (where each team completes their piece of the product before handing it to the next team).
    </p>
    <p class="c4">
      Open source software has seen very few of these changes, despite our increasing reliance on these projects. Understandably, code is central to an open source project, since in some ways it is the “product” or output. Less valued are functions such as community, documentation, or evangelism, that are the mark of any healthy, sustainable organization. As a result, projects become imbalanced.
    </p>
    <p class="c4">
      There is plenty of work that could be done to fund and support non-code contributions, in-kind donations (such as paying for servers), and benefits (such as health insurance). Having this type of support could go a long way in easing the burden on maintainers.
    </p>
    <p class="c4">
      <span class="c1 c11">The crossroads we face</span>
    </p>
    <p class="c4">
      The current state of our digital infrastructure is one of the most poorly understood issues of our time. It is critical that we understand it.
    </p>
    <p class="c4">
      By making a voluntary investment in our underlying infrastructure, developers made it easier for others to build software. By giving it away for free instead of charging for it, they fueled an information revolution.
    </p>
    <p class="c4">
      Developers did not do this for altruistic reasons. They did it because it was the best way to solve their own problems. The story of open source software is one of the great modern day triumphs of the public good.
    </p>
    <p class="c4">
      We are lucky that developers have borne the hidden cost of these investments. But their initial investments only get us so far.
    </p>
    <p class="c4">
      We are merely at the beginning of the story of how software transformed humanity. Marc Andreessen, the co-founder of Netscape and well-known venture capitalist behind the firm Andreessen Horowitz, observed in 2011 that “software is eating the world.”
      <sup>
        <a href="appendix.xhtml#ftnt205" id="ftnt_ref205">[205]</a>
      </sup>
       Since then, that statement that has become canon for the modern age.
    </p>
    <p class="c4">
      Software affects everything we do: not just the frivolous and entertaining, but the mandatory and critical. OpenSSL, the project described at the beginning of this paper, demonstrates this well. In a phone interview, Steve Marquess explained that OpenSSL was used not just by consumer websites, but by the government, drones, satellites, “any gadget you hear in the hospital beeping.”
      <sup>
        <a href="appendix.xhtml#ftnt206" id="ftnt_ref206">[206]</a>
      </sup>
       The Network Time Protocol, maintained by Harlan Stenn, synchronizes the clocks used by billions of networked devices and affects everything with a timestamp: not just messaging apps or email, but financial markets, medical records, and chemical processing.
    </p>
    <p class="c4">
      And yet, Harlan observes:
    </p>
    <p class="c3">
      <span class="c6">There is a need for support for the free public infrastructure. But there's just no revenue stream around time right now. People scream if their clocks are off by a second. They say, ‘Yes, we need you, but we can't give you any money.'</span>
      <sup>
        <a href="appendix.xhtml#ftnt207" id="ftnt_ref207">[207]</a>
      </sup>
    </p>
    <p class="c4">
      In the last five years, 
      open source
       infrastructure has become an essential layer of our social fabric. But much like startups or technology itself, what worked for the first 30 years of open source’s history won’t work moving forward. In order to maintain our pace of progress, we need to invest back into the tools that help us build bigger and better things.
    </p>
    <p class="c4">
      Figuring out how to support digital infrastructure may seem daunting, but there are plenty of reasons to see the road ahead as an opportunity.
    </p>
    <p class="c4">
      Firstly, the infrastructure is already there, with clearly demonstrated present value. This report does not propose to invest in an idea with unknown future value. The enormous social contributions of today’s digital infrastructure cannot be ignored or argued away, as has happened with other, equally important debates about data and privacy, net neutrality, or private versus public interests. This makes it easier to shift the conversation to solutions.
    </p>
    <p class="c4">
      Secondly, there are already engaged, thriving open source communities to work with. Many developers identify with the programming language they use (such as Python or JavaScript), the function they provide (such as data science or devops), or a prominent project (such as Node.js or Rails). These are strong, vocal
      ,
       and enthusiastic communities.
    </p>
    <p class="c4">
      The builders of our digital infrastructure are connected to each other, aware of their needs, and technically talented. They already built our city; we just need to help keep the lights on so they can continue doing what they do best.
    </p>
    <p class="c4">
      Infrastructure, whether physical or digital, is not easy to understand, and its effects 
      are 
      not always visible, but this should compel us to look more, not less, closely. When a community has spoken so vocally and so often about its needs, all we need to do is listen.
    </p>
  </body>
</html>
